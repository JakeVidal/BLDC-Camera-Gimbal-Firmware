
BLDC_Camera_Gimbal_Firmware_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ddc  08002ddc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ddc  08002ddc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002df0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002df0  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9af  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4e  00000000  00000000  0002d9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d58b  00000000  00000000  00030498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fb4  00000000  00000000  0004da23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3cf4  00000000  00000000  000559d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f96cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b98  00000000  00000000  000f9748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d78 	.word	0x08002d78

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002d78 	.word	0x08002d78

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f91b 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f002 fa8a 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f925 	bl	800046e <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f8fb 	bl	8000436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return uwTick;  
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <HAL_GetTick+0x14>)
 8000266:	681b      	ldr	r3, [r3, #0]
}
 8000268:	4618      	mov	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000028 	.word	0x20000028

08000278 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000280:	f7ff ffee 	bl	8000260 <HAL_GetTick>
 8000284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000290:	d005      	beq.n	800029e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <HAL_Delay+0x40>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	461a      	mov	r2, r3
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	4413      	add	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800029e:	bf00      	nop
 80002a0:	f7ff ffde 	bl	8000260 <HAL_GetTick>
 80002a4:	4602      	mov	r2, r0
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d8f7      	bhi.n	80002a0 <HAL_Delay+0x28>
  {
  }
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000004 	.word	0x20000004

080002bc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <NVIC_SetPriorityGrouping+0x44>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d2:	68ba      	ldr	r2, [r7, #8]
 80002d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002d8:	4013      	ands	r3, r2
 80002da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ee:	4a04      	ldr	r2, [pc, #16]	; (8000300 <NVIC_SetPriorityGrouping+0x44>)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	60d3      	str	r3, [r2, #12]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <NVIC_GetPriorityGrouping+0x18>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 0307 	and.w	r3, r3, #7
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	da0b      	bge.n	800034c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	490c      	ldr	r1, [pc, #48]	; (800036c <NVIC_SetPriority+0x4c>)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 030f 	and.w	r3, r3, #15
 8000340:	3b04      	subs	r3, #4
 8000342:	0112      	lsls	r2, r2, #4
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	440b      	add	r3, r1
 8000348:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800034a:	e009      	b.n	8000360 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4907      	ldr	r1, [pc, #28]	; (8000370 <NVIC_SetPriority+0x50>)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	0112      	lsls	r2, r2, #4
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	440b      	add	r3, r1
 800035c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00
 8000370:	e000e100 	.word	0xe000e100

08000374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000374:	b480      	push	{r7}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f003 0307 	and.w	r3, r3, #7
 8000386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	f1c3 0307 	rsb	r3, r3, #7
 800038e:	2b04      	cmp	r3, #4
 8000390:	bf28      	it	cs
 8000392:	2304      	movcs	r3, #4
 8000394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	3304      	adds	r3, #4
 800039a:	2b06      	cmp	r3, #6
 800039c:	d902      	bls.n	80003a4 <NVIC_EncodePriority+0x30>
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	3b03      	subs	r3, #3
 80003a2:	e000      	b.n	80003a6 <NVIC_EncodePriority+0x32>
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	69bb      	ldr	r3, [r7, #24]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	43da      	mvns	r2, r3
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	401a      	ands	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003bc:	f04f 31ff 	mov.w	r1, #4294967295
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43d9      	mvns	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	4313      	orrs	r3, r2
         );
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3724      	adds	r7, #36	; 0x24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
	...

080003dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003ec:	d301      	bcc.n	80003f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ee:	2301      	movs	r3, #1
 80003f0:	e00f      	b.n	8000412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <SysTick_Config+0x40>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003fa:	210f      	movs	r1, #15
 80003fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000400:	f7ff ff8e 	bl	8000320 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <SysTick_Config+0x40>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <SysTick_Config+0x40>)
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	e000e010 	.word	0xe000e010

08000420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff47 	bl	80002bc <NVIC_SetPriorityGrouping>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000448:	f7ff ff5c 	bl	8000304 <NVIC_GetPriorityGrouping>
 800044c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	68b9      	ldr	r1, [r7, #8]
 8000452:	6978      	ldr	r0, [r7, #20]
 8000454:	f7ff ff8e 	bl	8000374 <NVIC_EncodePriority>
 8000458:	4602      	mov	r2, r0
 800045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff5d 	bl	8000320 <NVIC_SetPriority>
}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ffb0 	bl	80003dc <SysTick_Config>
 800047c:	4603      	mov	r3, r0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000488:	b480      	push	{r7}
 800048a:	b087      	sub	sp, #28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800049e:	e160      	b.n	8000762 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f000 8152 	beq.w	800075c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d003      	beq.n	80004c8 <HAL_GPIO_Init+0x40>
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	2b12      	cmp	r3, #18
 80004c6:	d123      	bne.n	8000510 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	08da      	lsrs	r2, r3, #3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3208      	adds	r2, #8
 80004d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	f003 0307 	and.w	r3, r3, #7
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	220f      	movs	r2, #15
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	43db      	mvns	r3, r3
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	4013      	ands	r3, r2
 80004ea:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	691a      	ldr	r2, [r3, #16]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	4313      	orrs	r3, r2
 8000500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	08da      	lsrs	r2, r3, #3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3208      	adds	r2, #8
 800050a:	6939      	ldr	r1, [r7, #16]
 800050c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2203      	movs	r2, #3
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f003 0203 	and.w	r2, r3, #3
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	693a      	ldr	r2, [r7, #16]
 800053a:	4313      	orrs	r3, r2
 800053c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d00b      	beq.n	8000564 <HAL_GPIO_Init+0xdc>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d007      	beq.n	8000564 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	2b11      	cmp	r3, #17
 800055a:	d003      	beq.n	8000564 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b12      	cmp	r3, #18
 8000562:	d130      	bne.n	80005c6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	4313      	orrs	r3, r2
 800058c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800059a:	2201      	movs	r2, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4013      	ands	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	091b      	lsrs	r3, r3, #4
 80005b0:	f003 0201 	and.w	r2, r3, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4313      	orrs	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2203      	movs	r2, #3
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	4013      	ands	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 80ac 	beq.w	800075c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <HAL_GPIO_Init+0x2f8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a5d      	ldr	r2, [pc, #372]	; (8000780 <HAL_GPIO_Init+0x2f8>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b5b      	ldr	r3, [pc, #364]	; (8000780 <HAL_GPIO_Init+0x2f8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800061c:	4a59      	ldr	r2, [pc, #356]	; (8000784 <HAL_GPIO_Init+0x2fc>)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	3302      	adds	r3, #2
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	f003 0303 	and.w	r3, r3, #3
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	220f      	movs	r2, #15
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000646:	d025      	beq.n	8000694 <HAL_GPIO_Init+0x20c>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a4f      	ldr	r2, [pc, #316]	; (8000788 <HAL_GPIO_Init+0x300>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d01f      	beq.n	8000690 <HAL_GPIO_Init+0x208>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a4e      	ldr	r2, [pc, #312]	; (800078c <HAL_GPIO_Init+0x304>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d019      	beq.n	800068c <HAL_GPIO_Init+0x204>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a4d      	ldr	r2, [pc, #308]	; (8000790 <HAL_GPIO_Init+0x308>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d013      	beq.n	8000688 <HAL_GPIO_Init+0x200>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a4c      	ldr	r2, [pc, #304]	; (8000794 <HAL_GPIO_Init+0x30c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d00d      	beq.n	8000684 <HAL_GPIO_Init+0x1fc>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a4b      	ldr	r2, [pc, #300]	; (8000798 <HAL_GPIO_Init+0x310>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d007      	beq.n	8000680 <HAL_GPIO_Init+0x1f8>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a4a      	ldr	r2, [pc, #296]	; (800079c <HAL_GPIO_Init+0x314>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d101      	bne.n	800067c <HAL_GPIO_Init+0x1f4>
 8000678:	2306      	movs	r3, #6
 800067a:	e00c      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 800067c:	2307      	movs	r3, #7
 800067e:	e00a      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 8000680:	2305      	movs	r3, #5
 8000682:	e008      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 8000684:	2304      	movs	r3, #4
 8000686:	e006      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 8000688:	2303      	movs	r3, #3
 800068a:	e004      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 800068c:	2302      	movs	r3, #2
 800068e:	e002      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <HAL_GPIO_Init+0x20e>
 8000694:	2300      	movs	r3, #0
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	f002 0203 	and.w	r2, r2, #3
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	4093      	lsls	r3, r2
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a6:	4937      	ldr	r1, [pc, #220]	; (8000784 <HAL_GPIO_Init+0x2fc>)
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	3302      	adds	r3, #2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <HAL_GPIO_Init+0x318>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	43db      	mvns	r3, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <HAL_GPIO_Init+0x318>)
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <HAL_GPIO_Init+0x318>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	43db      	mvns	r3, r3
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	4013      	ands	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4313      	orrs	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000702:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <HAL_GPIO_Init+0x318>)
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <HAL_GPIO_Init+0x318>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	43db      	mvns	r3, r3
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4313      	orrs	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800072c:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <HAL_GPIO_Init+0x318>)
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_GPIO_Init+0x318>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	43db      	mvns	r3, r3
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4013      	ands	r3, r2
 8000740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_GPIO_Init+0x318>)
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	3301      	adds	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	f47f ae97 	bne.w	80004a0 <HAL_GPIO_Init+0x18>
  }
}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40010000 	.word	0x40010000
 8000788:	48000400 	.word	0x48000400
 800078c:	48000800 	.word	0x48000800
 8000790:	48000c00 	.word	0x48000c00
 8000794:	48001000 	.word	0x48001000
 8000798:	48001400 	.word	0x48001400
 800079c:	48001800 	.word	0x48001800
 80007a0:	40010400 	.word	0x40010400

080007a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f000 beda 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f000 8164 	beq.w	8000a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ce:	4bb0      	ldr	r3, [pc, #704]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 030c 	and.w	r3, r3, #12
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d00c      	beq.n	80007f4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007da:	4bad      	ldr	r3, [pc, #692]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 030c 	and.w	r3, r3, #12
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d15a      	bne.n	800089c <HAL_RCC_OscConfig+0xf8>
 80007e6:	4baa      	ldr	r3, [pc, #680]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f2:	d153      	bne.n	800089c <HAL_RCC_OscConfig+0xf8>
 80007f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000800:	fa93 f3a3 	rbit	r3, r3
 8000804:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000808:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080c:	fab3 f383 	clz	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b01      	cmp	r3, #1
 800081e:	d102      	bne.n	8000826 <HAL_RCC_OscConfig+0x82>
 8000820:	4b9b      	ldr	r3, [pc, #620]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	e015      	b.n	8000852 <HAL_RCC_OscConfig+0xae>
 8000826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800082a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800082e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000832:	fa93 f3a3 	rbit	r3, r3
 8000836:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800083a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800083e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000842:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000846:	fa93 f3a3 	rbit	r3, r3
 800084a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800084e:	4b90      	ldr	r3, [pc, #576]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000856:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800085a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800085e:	fa92 f2a2 	rbit	r2, r2
 8000862:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000866:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	b252      	sxtb	r2, r2
 8000870:	f042 0220 	orr.w	r2, r2, #32
 8000874:	b252      	sxtb	r2, r2
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	f002 021f 	and.w	r2, r2, #31
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 8105 	beq.w	8000a94 <HAL_RCC_OscConfig+0x2f0>
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	f040 80ff 	bne.w	8000a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	f000 be6b 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a6:	d106      	bne.n	80008b6 <HAL_RCC_OscConfig+0x112>
 80008a8:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a78      	ldr	r2, [pc, #480]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e030      	b.n	8000918 <HAL_RCC_OscConfig+0x174>
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10c      	bne.n	80008da <HAL_RCC_OscConfig+0x136>
 80008c0:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a72      	ldr	r2, [pc, #456]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a6f      	ldr	r2, [pc, #444]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e01e      	b.n	8000918 <HAL_RCC_OscConfig+0x174>
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e4:	d10c      	bne.n	8000900 <HAL_RCC_OscConfig+0x15c>
 80008e6:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a69      	ldr	r2, [pc, #420]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a66      	ldr	r2, [pc, #408]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 80008f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e00b      	b.n	8000918 <HAL_RCC_OscConfig+0x174>
 8000900:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a62      	ldr	r2, [pc, #392]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000916:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d05a      	beq.n	80009d8 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000922:	f7ff fc9d 	bl	8000260 <HAL_GetTick>
 8000926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092a:	e00a      	b.n	8000942 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092c:	f7ff fc98 	bl	8000260 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b64      	cmp	r3, #100	; 0x64
 800093a:	d902      	bls.n	8000942 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	f000 be18 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
 8000942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000946:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800094e:	fa93 f3a3 	rbit	r3, r3
 8000952:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000956:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b01      	cmp	r3, #1
 800096c:	d102      	bne.n	8000974 <HAL_RCC_OscConfig+0x1d0>
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	e015      	b.n	80009a0 <HAL_RCC_OscConfig+0x1fc>
 8000974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000978:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000980:	fa93 f3a3 	rbit	r3, r3
 8000984:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000990:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009a8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009ac:	fa92 f2a2 	rbit	r2, r2
 80009b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b252      	sxtb	r2, r2
 80009be:	f042 0220 	orr.w	r2, r2, #32
 80009c2:	b252      	sxtb	r2, r2
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	f002 021f 	and.w	r2, r2, #31
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0aa      	beq.n	800092c <HAL_RCC_OscConfig+0x188>
 80009d6:	e05e      	b.n	8000a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fc42 	bl	8000260 <HAL_GetTick>
 80009dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e0:	e00a      	b.n	80009f8 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e2:	f7ff fc3d 	bl	8000260 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d902      	bls.n	80009f8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f000 bdbd 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
 80009f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a04:	fa93 f3a3 	rbit	r3, r3
 8000a08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_RCC_OscConfig+0x286>
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	e015      	b.n	8000a56 <HAL_RCC_OscConfig+0x2b2>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a4a:	fa93 f3a3 	rbit	r3, r3
 8000a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_RCC_OscConfig+0x2ec>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a62:	fa92 f2a2 	rbit	r2, r2
 8000a66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	b252      	sxtb	r2, r2
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	b252      	sxtb	r2, r2
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f002 021f 	and.w	r2, r2, #31
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1aa      	bne.n	80009e2 <HAL_RCC_OscConfig+0x23e>
 8000a8c:	e003      	b.n	8000a96 <HAL_RCC_OscConfig+0x2f2>
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 8171 	beq.w	8000d88 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aa6:	4bd0      	ldr	r3, [pc, #832]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00c      	beq.n	8000acc <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ab2:	4bcd      	ldr	r3, [pc, #820]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b08      	cmp	r3, #8
 8000abc:	d16e      	bne.n	8000b9c <HAL_RCC_OscConfig+0x3f8>
 8000abe:	4bca      	ldr	r3, [pc, #808]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000aca:	d167      	bne.n	8000b9c <HAL_RCC_OscConfig+0x3f8>
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000ade:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_RCC_OscConfig+0x358>
 8000af6:	4bbc      	ldr	r3, [pc, #752]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	e013      	b.n	8000b24 <HAL_RCC_OscConfig+0x380>
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b02:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b06:	fa93 f3a3 	rbit	r3, r3
 8000b0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b0e:	2302      	movs	r3, #2
 8000b10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b14:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b20:	4bb1      	ldr	r3, [pc, #708]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b24:	2202      	movs	r2, #2
 8000b26:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b2a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b2e:	fa92 f2a2 	rbit	r2, r2
 8000b32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b3a:	fab2 f282 	clz	r2, r2
 8000b3e:	b252      	sxtb	r2, r2
 8000b40:	f042 0220 	orr.w	r2, r2, #32
 8000b44:	b252      	sxtb	r2, r2
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	f002 021f 	and.w	r2, r2, #31
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <HAL_RCC_OscConfig+0x3c4>
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d002      	beq.n	8000b68 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f000 bd05 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b68:	4b9f      	ldr	r3, [pc, #636]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6919      	ldr	r1, [r3, #16]
 8000b76:	23f8      	movs	r3, #248	; 0xf8
 8000b78:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b80:	fa93 f3a3 	rbit	r3, r3
 8000b84:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b88:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	4994      	ldr	r1, [pc, #592]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9a:	e0f5      	b.n	8000d88 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 8085 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x50e>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bbe:	fab3 f383 	clz	r3, r3
 8000bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2301      	movs	r3, #1
 8000bd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fb45 	bl	8000260 <HAL_GetTick>
 8000bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bda:	e00a      	b.n	8000bf2 <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bdc:	f7ff fb40 	bl	8000260 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d902      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f000 bcc0 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_RCC_OscConfig+0x47e>
 8000c1c:	4b72      	ldr	r3, [pc, #456]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	e013      	b.n	8000c4a <HAL_RCC_OscConfig+0x4a6>
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c3a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c46:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c50:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c54:	fa92 f2a2 	rbit	r2, r2
 8000c58:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b252      	sxtb	r2, r2
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	b252      	sxtb	r2, r2
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f002 021f 	and.w	r2, r2, #31
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0ae      	beq.n	8000bdc <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7e:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6919      	ldr	r1, [r3, #16]
 8000c8c:	23f8      	movs	r3, #248	; 0xf8
 8000c8e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c96:	fa93 f3a3 	rbit	r3, r3
 8000c9a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000c9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	494f      	ldr	r1, [pc, #316]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
 8000cb0:	e06a      	b.n	8000d88 <HAL_RCC_OscConfig+0x5e4>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fac0 	bl	8000260 <HAL_GetTick>
 8000ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce4:	e00a      	b.n	8000cfc <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fabb 	bl	8000260 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d902      	bls.n	8000cfc <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f000 bc3b 	b.w	8001572 <HAL_RCC_OscConfig+0xdce>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d102      	bne.n	8000d2c <HAL_RCC_OscConfig+0x588>
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	e013      	b.n	8000d54 <HAL_RCC_OscConfig+0x5b0>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <HAL_RCC_OscConfig+0x644>)
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	2202      	movs	r2, #2
 8000d56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d5a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d5e:	fa92 f2a2 	rbit	r2, r2
 8000d62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b252      	sxtb	r2, r2
 8000d70:	f042 0220 	orr.w	r2, r2, #32
 8000d74:	b252      	sxtb	r2, r2
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	f002 021f 	and.w	r2, r2, #31
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1ae      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80d7 	beq.w	8000f46 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d066      	beq.n	8000e70 <HAL_RCC_OscConfig+0x6cc>
 8000da2:	2301      	movs	r3, #1
 8000da4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dac:	fa93 f3a3 	rbit	r3, r3
 8000db0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_RCC_OscConfig+0x648>)
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fa49 	bl	8000260 <HAL_GetTick>
 8000dce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	e00d      	b.n	8000df0 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fa44 	bl	8000260 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d905      	bls.n	8000df0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e3c4      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 8000de8:	40021000 	.word	0x40021000
 8000dec:	10908120 	.word	0x10908120
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e0c:	fa93 f2a3 	rbit	r2, r3
 8000e10:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	fa93 f2a3 	rbit	r2, r3
 8000e28:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	4ba5      	ldr	r3, [pc, #660]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e36:	2102      	movs	r1, #2
 8000e38:	6019      	str	r1, [r3, #0]
 8000e3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	fa93 f1a3 	rbit	r1, r3
 8000e44:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e48:	6019      	str	r1, [r3, #0]
  return(result);
 8000e4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0b2      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x630>
 8000e6e:	e06a      	b.n	8000f46 <HAL_RCC_OscConfig+0x7a2>
 8000e70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	fa93 f2a3 	rbit	r2, r3
 8000e82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e86:	601a      	str	r2, [r3, #0]
  return(result);
 8000e88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b8c      	ldr	r3, [pc, #560]	; (80010c8 <HAL_RCC_OscConfig+0x924>)
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff f9de 	bl	8000260 <HAL_GetTick>
 8000ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e009      	b.n	8000ebe <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff f9d9 	bl	8000260 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e359      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 8000ebe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	fa93 f2a3 	rbit	r2, r3
 8000ed0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eda:	2202      	movs	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	fa93 f2a3 	rbit	r2, r3
 8000ee8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	fa93 f2a3 	rbit	r2, r3
 8000f00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f0e:	2102      	movs	r1, #2
 8000f10:	6019      	str	r1, [r3, #0]
 8000f12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	fa93 f1a3 	rbit	r1, r3
 8000f1c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f20:	6019      	str	r1, [r3, #0]
  return(result);
 8000f22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1b1      	bne.n	8000eaa <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 8159 	beq.w	8001208 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5c:	4b59      	ldr	r3, [pc, #356]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	4b56      	ldr	r3, [pc, #344]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a55      	ldr	r2, [pc, #340]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <HAL_RCC_OscConfig+0x928>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11a      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x928>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_RCC_OscConfig+0x928>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff f95b 	bl	8000260 <HAL_GetTick>
 8000faa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	e009      	b.n	8000fc4 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb0:	f7ff f956 	bl	8000260 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e2d6      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_RCC_OscConfig+0x928>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ef      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d106      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x844>
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e02f      	b.n	8001048 <HAL_RCC_OscConfig+0x8a4>
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x868>
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001004:	f023 0304 	bic.w	r3, r3, #4
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0x8a4>
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x88c>
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x8a4>
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d06b      	beq.n	800112a <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001052:	f7ff f905 	bl	8000260 <HAL_GetTick>
 8001056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f7ff f900 	bl	8000260 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	; 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e27e      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 8001074:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	fa93 f2a3 	rbit	r2, r3
 8001086:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001090:	2202      	movs	r2, #2
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	fa93 f2a3 	rbit	r2, r3
 800109e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010a2:	601a      	str	r2, [r3, #0]
  return(result);
 80010a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d108      	bne.n	80010d0 <HAL_RCC_OscConfig+0x92c>
 80010be:	4b01      	ldr	r3, [pc, #4]	; (80010c4 <HAL_RCC_OscConfig+0x920>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	e013      	b.n	80010ec <HAL_RCC_OscConfig+0x948>
 80010c4:	40021000 	.word	0x40021000
 80010c8:	10908120 	.word	0x10908120
 80010cc:	40007000 	.word	0x40007000
 80010d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	fa93 f2a3 	rbit	r2, r3
 80010e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4bc0      	ldr	r3, [pc, #768]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010f0:	2102      	movs	r1, #2
 80010f2:	6011      	str	r1, [r2, #0]
 80010f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	fa92 f1a2 	rbit	r1, r2
 80010fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001102:	6011      	str	r1, [r2, #0]
  return(result);
 8001104:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b252      	sxtb	r2, r2
 8001110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001114:	b252      	sxtb	r2, r2
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f002 021f 	and.w	r2, r2, #31
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d099      	beq.n	800105c <HAL_RCC_OscConfig+0x8b8>
 8001128:	e064      	b.n	80011f4 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff f899 	bl	8000260 <HAL_GetTick>
 800112e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001134:	f7ff f894 	bl	8000260 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e212      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 800114c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001150:	2202      	movs	r2, #2
 8001152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	fa93 f2a3 	rbit	r2, r3
 800115e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	fa93 f2a3 	rbit	r2, r3
 8001176:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800117a:	601a      	str	r2, [r3, #0]
  return(result);
 800117c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001180:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0x9f8>
 8001196:	4b95      	ldr	r3, [pc, #596]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	e00d      	b.n	80011b8 <HAL_RCC_OscConfig+0xa14>
 800119c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fa93 f2a3 	rbit	r2, r3
 80011ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4b8d      	ldr	r3, [pc, #564]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011bc:	2102      	movs	r1, #2
 80011be:	6011      	str	r1, [r2, #0]
 80011c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	fa92 f1a2 	rbit	r1, r2
 80011ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011ce:	6011      	str	r1, [r2, #0]
  return(result);
 80011d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	fab2 f282 	clz	r2, r2
 80011da:	b252      	sxtb	r2, r2
 80011dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e0:	b252      	sxtb	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f002 021f 	and.w	r2, r2, #31
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d19f      	bne.n	8001134 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001206:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 81ae 	beq.w	8001570 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001214:	4b75      	ldr	r3, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	f000 81a5 	beq.w	800156c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	2b02      	cmp	r3, #2
 800122a:	f040 811d 	bne.w	8001468 <HAL_RCC_OscConfig+0xcc4>
 800122e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	fa93 f2a3 	rbit	r2, r3
 8001242:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001246:	601a      	str	r2, [r3, #0]
  return(result);
 8001248:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800124c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001256:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	2300      	movs	r3, #0
 8001260:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7fe fffd 	bl	8000260 <HAL_GetTick>
 8001266:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	e009      	b.n	8001280 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800126c:	f7fe fff8 	bl	8000260 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e178      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 8001280:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001298:	601a      	str	r2, [r3, #0]
  return(result);
 800129a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800129e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_OscConfig+0xb16>
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e01b      	b.n	80012f2 <HAL_RCC_OscConfig+0xb4e>
 80012ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	fa93 f2a3 	rbit	r2, r3
 80012ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012fa:	6011      	str	r1, [r2, #0]
 80012fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	fa92 f1a2 	rbit	r1, r2
 8001306:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800130a:	6011      	str	r1, [r2, #0]
  return(result);
 800130c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b252      	sxtb	r2, r2
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	b252      	sxtb	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d19d      	bne.n	800126c <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	f023 020f 	bic.w	r2, r3, #15
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	492b      	ldr	r1, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001340:	4313      	orrs	r3, r2
 8001342:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6a19      	ldr	r1, [r3, #32]
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	430b      	orrs	r3, r1
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	fa93 f2a3 	rbit	r2, r3
 8001374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001378:	601a      	str	r2, [r3, #0]
  return(result);
 800137a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	461a      	mov	r2, r3
 8001390:	2301      	movs	r3, #1
 8001392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7fe ff64 	bl	8000260 <HAL_GetTick>
 8001398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7fe ff5f 	bl	8000260 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0df      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 80013b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ca:	601a      	str	r2, [r3, #0]
  return(result);
 80013cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	095b      	lsrs	r3, r3, #5
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d104      	bne.n	80013f0 <HAL_RCC_OscConfig+0xc4c>
 80013e6:	4b01      	ldr	r3, [pc, #4]	; (80013ec <HAL_RCC_OscConfig+0xc48>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xc84>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800140e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <HAL_RCC_OscConfig+0xdd8>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800142c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001430:	6011      	str	r1, [r2, #0]
 8001432:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	fa92 f1a2 	rbit	r1, r2
 800143c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001440:	6011      	str	r1, [r2, #0]
  return(result);
 8001442:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	fab2 f282 	clz	r2, r2
 800144c:	b252      	sxtb	r2, r2
 800144e:	f042 0220 	orr.w	r2, r2, #32
 8001452:	b252      	sxtb	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d09b      	beq.n	800139e <HAL_RCC_OscConfig+0xbfa>
 8001466:	e083      	b.n	8001570 <HAL_RCC_OscConfig+0xdcc>
 8001468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800146c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001480:	601a      	str	r2, [r3, #0]
  return(result);
 8001482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001486:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	461a      	mov	r2, r3
 8001498:	2300      	movs	r3, #0
 800149a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7fe fee0 	bl	8000260 <HAL_GetTick>
 80014a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	e009      	b.n	80014ba <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7fe fedb 	bl	8000260 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e05b      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
 80014ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f2a3 	rbit	r2, r3
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	601a      	str	r2, [r3, #0]
  return(result);
 80014d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	095b      	lsrs	r3, r3, #5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0xd50>
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_RCC_OscConfig+0xdd8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0xd88>
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_RCC_OscConfig+0xdd8>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f107 0214 	add.w	r2, r7, #20
 8001530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001534:	6011      	str	r1, [r2, #0]
 8001536:	f107 0214 	add.w	r2, r7, #20
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	fa92 f1a2 	rbit	r1, r2
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	6011      	str	r1, [r2, #0]
  return(result);
 8001546:	f107 0210 	add.w	r2, r7, #16
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	fab2 f282 	clz	r2, r2
 8001550:	b252      	sxtb	r2, r2
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	b252      	sxtb	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f002 021f 	and.w	r2, r2, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d19d      	bne.n	80014a6 <HAL_RCC_OscConfig+0xd02>
 800156a:	e001      	b.n	8001570 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b09e      	sub	sp, #120	; 0x78
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e164      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b8f      	ldr	r3, [pc, #572]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	498d      	ldr	r1, [pc, #564]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e14c      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4981      	ldr	r1, [pc, #516]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80df 	beq.w	80017b2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d13d      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
 80015fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001600:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800160a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_RCC_ClockConfig+0xa6>
 8001620:	4b71      	ldr	r3, [pc, #452]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e00f      	b.n	8001646 <HAL_RCC_ClockConfig+0xc6>
 8001626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	667b      	str	r3, [r7, #100]	; 0x64
 8001634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001638:	663b      	str	r3, [r7, #96]	; 0x60
 800163a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001642:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164a:	65ba      	str	r2, [r7, #88]	; 0x58
 800164c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b252      	sxtb	r2, r2
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	b252      	sxtb	r2, r2
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f002 021f 	and.w	r2, r2, #31
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d17d      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0f4      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d13d      	bne.n	80016fc <HAL_RCC_ClockConfig+0x17c>
 8001680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800168e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_ClockConfig+0x12a>
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e00f      	b.n	80016ca <HAL_RCC_ClockConfig+0x14a>
 80016aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	647b      	str	r3, [r7, #68]	; 0x44
 80016b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
 80016be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80016d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016d2:	fa92 f2a2 	rbit	r2, r2
 80016d6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	b252      	sxtb	r2, r2
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	b252      	sxtb	r2, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f002 021f 	and.w	r2, r2, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d13b      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b2      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
 80016fc:	2302      	movs	r3, #2
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_RCC_ClockConfig+0x1a4>
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e00d      	b.n	8001740 <HAL_RCC_ClockConfig+0x1c0>
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2202      	movs	r2, #2
 8001742:	61ba      	str	r2, [r7, #24]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	fa92 f2a2 	rbit	r2, r2
 800174a:	617a      	str	r2, [r7, #20]
  return(result);
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b252      	sxtb	r2, r2
 8001754:	f042 0220 	orr.w	r2, r2, #32
 8001758:	b252      	sxtb	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 021f 	and.w	r2, r2, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e078      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 0203 	bic.w	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	491a      	ldr	r1, [pc, #104]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001782:	f7fe fd6d 	bl	8000260 <HAL_GetTick>
 8001786:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7fe fd69 	bl	8000260 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e060      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 020c 	and.w	r2, r3, #12
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d1eb      	bne.n	800178a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d215      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 0207 	bic.w	r2, r3, #7
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d006      	beq.n	80017ec <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e03f      	b.n	8001862 <HAL_RCC_ClockConfig+0x2e2>
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_RCC_ClockConfig+0x2ec>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4919      	ldr	r1, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x2ec>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_ClockConfig+0x2ec>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4911      	ldr	r1, [pc, #68]	; (800186c <HAL_RCC_ClockConfig+0x2ec>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800182a:	f000 f825 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 800182e:	4601      	mov	r1, r0
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x2ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001838:	23f0      	movs	r3, #240	; 0xf0
 800183a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	60fb      	str	r3, [r7, #12]
  return(result);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_RCC_ClockConfig+0x2f0>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	fa21 f303 	lsr.w	r3, r1, r3
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_RCC_ClockConfig+0x2f4>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f7fe fcd0 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3778      	adds	r7, #120	; 0x78
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	08002dc4 	.word	0x08002dc4
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b08b      	sub	sp, #44	; 0x2c
 800187c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x30>
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x36>
 80018a6:	e03f      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018aa:	623b      	str	r3, [r7, #32]
      break;
 80018ac:	e03f      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018b8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	607b      	str	r3, [r7, #4]
  return(result);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f003 020f 	and.w	r2, r3, #15
 80018da:	230f      	movs	r3, #15
 80018dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	fbb2 f2f3 	udiv	r2, r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	e007      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fbb2 f2f3 	udiv	r2, r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	623b      	str	r3, [r7, #32]
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetSysClockFreq+0xc8>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	6a3b      	ldr	r3, [r7, #32]
}
 8001930:	4618      	mov	r0, r3
 8001932:	372c      	adds	r7, #44	; 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	007a1200 	.word	0x007a1200
 8001944:	08002da4 	.word	0x08002da4
 8001948:	08002db4 	.word	0x08002db4

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800196a:	f7ff ffef 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196e:	4601      	mov	r1, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001978:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800197c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	603b      	str	r3, [r7, #0]
  return(result);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08002dd4 	.word	0x08002dd4

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80019ae:	f7ff ffcd 	bl	800194c <HAL_RCC_GetHCLKFreq>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80019bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019c0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	603b      	str	r3, [r7, #0]
  return(result);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	08002dd4 	.word	0x08002dd4

080019ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b092      	sub	sp, #72	; 0x48
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80d6 	beq.w	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10e      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	61d3      	str	r3, [r2, #28]
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7fe fc05 	bl	8000260 <HAL_GetTick>
 8001a56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7fe fc01 	bl	8000260 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1d4      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8083 	beq.w	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d07b      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ae6:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d04c      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe fbb3 	bl	8000260 <HAL_GetTick>
 8001afa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe fbaf 	bl	8000260 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e180      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d108      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001b42:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	e00d      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	10908100 	.word	0x10908100
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	4b9c      	ldr	r3, [pc, #624]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	613a      	str	r2, [r7, #16]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	fa92 f2a2 	rbit	r2, r2
 8001b6e:	60fa      	str	r2, [r7, #12]
  return(result);
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b252      	sxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7c:	b252      	sxtb	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f002 021f 	and.w	r2, r2, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0b6      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b90:	4b90      	ldr	r3, [pc, #576]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	498d      	ldr	r1, [pc, #564]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ba2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a89      	ldr	r2, [pc, #548]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bc2:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4981      	ldr	r1, [pc, #516]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4979      	ldr	r1, [pc, #484]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	4972      	ldr	r1, [pc, #456]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c1c:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f023 0210 	bic.w	r2, r3, #16
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	496a      	ldr	r1, [pc, #424]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001c3a:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	4963      	ldr	r1, [pc, #396]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f023 0220 	bic.w	r2, r3, #32
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	495b      	ldr	r1, [pc, #364]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c76:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	4954      	ldr	r1, [pc, #336]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	494c      	ldr	r1, [pc, #304]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cb2:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4945      	ldr	r1, [pc, #276]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cd0:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	493d      	ldr	r1, [pc, #244]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	492e      	ldr	r1, [pc, #184]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	4927      	ldr	r1, [pc, #156]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	491f      	ldr	r1, [pc, #124]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	4910      	ldr	r1, [pc, #64]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4909      	ldr	r1, [pc, #36]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	4901      	ldr	r1, [pc, #4]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	630b      	str	r3, [r1, #48]	; 0x30
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001dd4:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	490b      	ldr	r1, [pc, #44]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	4904      	ldr	r1, [pc, #16]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3748      	adds	r7, #72	; 0x48
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e043      	b.n	8001ebe <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fc80 	bl	8002750 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f82d 	bl	8001ec8 <UART_SetConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e022      	b.n	8001ebe <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa1f 	bl	80022c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 faa6 	bl	8002408 <UART_CheckIdleState>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4ba7      	ldr	r3, [pc, #668]	; (80021a0 <UART_SetConfig+0x2d8>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a96      	ldr	r2, [pc, #600]	; (80021a4 <UART_SetConfig+0x2dc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d121      	bne.n	8001f94 <UART_SetConfig+0xcc>
 8001f50:	4b95      	ldr	r3, [pc, #596]	; (80021a8 <UART_SetConfig+0x2e0>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d817      	bhi.n	8001f8c <UART_SetConfig+0xc4>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <UART_SetConfig+0x9c>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f87 	.word	0x08001f87
 8001f70:	08001f7b 	.word	0x08001f7b
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
 8001f78:	e0b2      	b.n	80020e0 <UART_SetConfig+0x218>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	e0af      	b.n	80020e0 <UART_SetConfig+0x218>
 8001f80:	2304      	movs	r3, #4
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	e0ac      	b.n	80020e0 <UART_SetConfig+0x218>
 8001f86:	2308      	movs	r3, #8
 8001f88:	75fb      	strb	r3, [r7, #23]
 8001f8a:	e0a9      	b.n	80020e0 <UART_SetConfig+0x218>
 8001f8c:	2310      	movs	r3, #16
 8001f8e:	75fb      	strb	r3, [r7, #23]
 8001f90:	bf00      	nop
 8001f92:	e0a5      	b.n	80020e0 <UART_SetConfig+0x218>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a84      	ldr	r2, [pc, #528]	; (80021ac <UART_SetConfig+0x2e4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d123      	bne.n	8001fe6 <UART_SetConfig+0x11e>
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <UART_SetConfig+0x2e0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d012      	beq.n	8001fd2 <UART_SetConfig+0x10a>
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d802      	bhi.n	8001fb8 <UART_SetConfig+0xf0>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <UART_SetConfig+0xfe>
 8001fb6:	e012      	b.n	8001fde <UART_SetConfig+0x116>
 8001fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fbc:	d00c      	beq.n	8001fd8 <UART_SetConfig+0x110>
 8001fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001fc2:	d003      	beq.n	8001fcc <UART_SetConfig+0x104>
 8001fc4:	e00b      	b.n	8001fde <UART_SetConfig+0x116>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
 8001fca:	e089      	b.n	80020e0 <UART_SetConfig+0x218>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	75fb      	strb	r3, [r7, #23]
 8001fd0:	e086      	b.n	80020e0 <UART_SetConfig+0x218>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	75fb      	strb	r3, [r7, #23]
 8001fd6:	e083      	b.n	80020e0 <UART_SetConfig+0x218>
 8001fd8:	2308      	movs	r3, #8
 8001fda:	75fb      	strb	r3, [r7, #23]
 8001fdc:	e080      	b.n	80020e0 <UART_SetConfig+0x218>
 8001fde:	2310      	movs	r3, #16
 8001fe0:	75fb      	strb	r3, [r7, #23]
 8001fe2:	bf00      	nop
 8001fe4:	e07c      	b.n	80020e0 <UART_SetConfig+0x218>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a71      	ldr	r2, [pc, #452]	; (80021b0 <UART_SetConfig+0x2e8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d123      	bne.n	8002038 <UART_SetConfig+0x170>
 8001ff0:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <UART_SetConfig+0x2e0>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ffc:	d012      	beq.n	8002024 <UART_SetConfig+0x15c>
 8001ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002002:	d802      	bhi.n	800200a <UART_SetConfig+0x142>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <UART_SetConfig+0x150>
 8002008:	e012      	b.n	8002030 <UART_SetConfig+0x168>
 800200a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800200e:	d00c      	beq.n	800202a <UART_SetConfig+0x162>
 8002010:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002014:	d003      	beq.n	800201e <UART_SetConfig+0x156>
 8002016:	e00b      	b.n	8002030 <UART_SetConfig+0x168>
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
 800201c:	e060      	b.n	80020e0 <UART_SetConfig+0x218>
 800201e:	2302      	movs	r3, #2
 8002020:	75fb      	strb	r3, [r7, #23]
 8002022:	e05d      	b.n	80020e0 <UART_SetConfig+0x218>
 8002024:	2304      	movs	r3, #4
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	e05a      	b.n	80020e0 <UART_SetConfig+0x218>
 800202a:	2308      	movs	r3, #8
 800202c:	75fb      	strb	r3, [r7, #23]
 800202e:	e057      	b.n	80020e0 <UART_SetConfig+0x218>
 8002030:	2310      	movs	r3, #16
 8002032:	75fb      	strb	r3, [r7, #23]
 8002034:	bf00      	nop
 8002036:	e053      	b.n	80020e0 <UART_SetConfig+0x218>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5d      	ldr	r2, [pc, #372]	; (80021b4 <UART_SetConfig+0x2ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d123      	bne.n	800208a <UART_SetConfig+0x1c2>
 8002042:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <UART_SetConfig+0x2e0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800204a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800204e:	d012      	beq.n	8002076 <UART_SetConfig+0x1ae>
 8002050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002054:	d802      	bhi.n	800205c <UART_SetConfig+0x194>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <UART_SetConfig+0x1a2>
 800205a:	e012      	b.n	8002082 <UART_SetConfig+0x1ba>
 800205c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002060:	d00c      	beq.n	800207c <UART_SetConfig+0x1b4>
 8002062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002066:	d003      	beq.n	8002070 <UART_SetConfig+0x1a8>
 8002068:	e00b      	b.n	8002082 <UART_SetConfig+0x1ba>
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
 800206e:	e037      	b.n	80020e0 <UART_SetConfig+0x218>
 8002070:	2302      	movs	r3, #2
 8002072:	75fb      	strb	r3, [r7, #23]
 8002074:	e034      	b.n	80020e0 <UART_SetConfig+0x218>
 8002076:	2304      	movs	r3, #4
 8002078:	75fb      	strb	r3, [r7, #23]
 800207a:	e031      	b.n	80020e0 <UART_SetConfig+0x218>
 800207c:	2308      	movs	r3, #8
 800207e:	75fb      	strb	r3, [r7, #23]
 8002080:	e02e      	b.n	80020e0 <UART_SetConfig+0x218>
 8002082:	2310      	movs	r3, #16
 8002084:	75fb      	strb	r3, [r7, #23]
 8002086:	bf00      	nop
 8002088:	e02a      	b.n	80020e0 <UART_SetConfig+0x218>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <UART_SetConfig+0x2f0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d123      	bne.n	80020dc <UART_SetConfig+0x214>
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <UART_SetConfig+0x2e0>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d012      	beq.n	80020c8 <UART_SetConfig+0x200>
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a6:	d802      	bhi.n	80020ae <UART_SetConfig+0x1e6>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <UART_SetConfig+0x1f4>
 80020ac:	e012      	b.n	80020d4 <UART_SetConfig+0x20c>
 80020ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020b2:	d00c      	beq.n	80020ce <UART_SetConfig+0x206>
 80020b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020b8:	d003      	beq.n	80020c2 <UART_SetConfig+0x1fa>
 80020ba:	e00b      	b.n	80020d4 <UART_SetConfig+0x20c>
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]
 80020c0:	e00e      	b.n	80020e0 <UART_SetConfig+0x218>
 80020c2:	2302      	movs	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
 80020c6:	e00b      	b.n	80020e0 <UART_SetConfig+0x218>
 80020c8:	2304      	movs	r3, #4
 80020ca:	75fb      	strb	r3, [r7, #23]
 80020cc:	e008      	b.n	80020e0 <UART_SetConfig+0x218>
 80020ce:	2308      	movs	r3, #8
 80020d0:	75fb      	strb	r3, [r7, #23]
 80020d2:	e005      	b.n	80020e0 <UART_SetConfig+0x218>
 80020d4:	2310      	movs	r3, #16
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	bf00      	nop
 80020da:	e001      	b.n	80020e0 <UART_SetConfig+0x218>
 80020dc:	2310      	movs	r3, #16
 80020de:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e8:	d17d      	bne.n	80021e6 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d865      	bhi.n	80021bc <UART_SetConfig+0x2f4>
 80020f0:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <UART_SetConfig+0x230>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	0800211d 	.word	0x0800211d
 80020fc:	08002139 	.word	0x08002139
 8002100:	08002155 	.word	0x08002155
 8002104:	080021bd 	.word	0x080021bd
 8002108:	0800216f 	.word	0x0800216f
 800210c:	080021bd 	.word	0x080021bd
 8002110:	080021bd 	.word	0x080021bd
 8002114:	080021bd 	.word	0x080021bd
 8002118:	0800218b 	.word	0x0800218b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800211c:	f7ff fc22 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 8002120:	4603      	mov	r3, r0
 8002122:	005a      	lsls	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	441a      	add	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	82bb      	strh	r3, [r7, #20]
        break;
 8002136:	e044      	b.n	80021c2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002138:	f7ff fc36 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 800213c:	4603      	mov	r3, r0
 800213e:	005a      	lsls	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	441a      	add	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	82bb      	strh	r3, [r7, #20]
        break;
 8002152:	e036      	b.n	80021c2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800215e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6852      	ldr	r2, [r2, #4]
 8002166:	fbb3 f3f2 	udiv	r3, r3, r2
 800216a:	82bb      	strh	r3, [r7, #20]
        break;
 800216c:	e029      	b.n	80021c2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800216e:	f7ff fb83 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8002172:	4603      	mov	r3, r0
 8002174:	005a      	lsls	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	82bb      	strh	r3, [r7, #20]
        break;
 8002188:	e01b      	b.n	80021c2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	82bb      	strh	r3, [r7, #20]
        break;
 800219e:	e010      	b.n	80021c2 <UART_SetConfig+0x2fa>
 80021a0:	efff69f3 	.word	0xefff69f3
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40004400 	.word	0x40004400
 80021b0:	40004800 	.word	0x40004800
 80021b4:	40004c00 	.word	0x40004c00
 80021b8:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	74fb      	strb	r3, [r7, #19]
        break;
 80021c0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80021c2:	8abb      	ldrh	r3, [r7, #20]
 80021c4:	f023 030f 	bic.w	r3, r3, #15
 80021c8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021ca:	8abb      	ldrh	r3, [r7, #20]
 80021cc:	105b      	asrs	r3, r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	4313      	orrs	r3, r2
 80021da:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	897a      	ldrh	r2, [r7, #10]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	e069      	b.n	80022ba <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d863      	bhi.n	80022b4 <UART_SetConfig+0x3ec>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <UART_SetConfig+0x32c>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002219 	.word	0x08002219
 80021f8:	08002239 	.word	0x08002239
 80021fc:	08002259 	.word	0x08002259
 8002200:	080022b5 	.word	0x080022b5
 8002204:	08002279 	.word	0x08002279
 8002208:	080022b5 	.word	0x080022b5
 800220c:	080022b5 	.word	0x080022b5
 8002210:	080022b5 	.word	0x080022b5
 8002214:	08002299 	.word	0x08002299
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002218:	f7ff fba4 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60da      	str	r2, [r3, #12]
        break;
 8002236:	e040      	b.n	80022ba <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002238:	f7ff fbb6 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60da      	str	r2, [r3, #12]
        break;
 8002256:	e030      	b.n	80022ba <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002262:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6852      	ldr	r2, [r2, #4]
 800226a:	fbb3 f3f2 	udiv	r3, r3, r2
 800226e:	b29a      	uxth	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60da      	str	r2, [r3, #12]
        break;
 8002276:	e020      	b.n	80022ba <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002278:	f7ff fafe 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60da      	str	r2, [r3, #12]
        break;
 8002296:	e010      	b.n	80022ba <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60da      	str	r2, [r3, #12]
        break;
 80022b2:	e002      	b.n	80022ba <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	74fb      	strb	r3, [r7, #19]
        break;
 80022b8:	bf00      	nop
    }
  }

  return ret;
 80022ba:	7cfb      	ldrb	r3, [r7, #19]

}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01a      	beq.n	80023da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c2:	d10a      	bne.n	80023da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
  }
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800241a:	f7fd ff21 	bl	8000260 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d10e      	bne.n	800244c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800242e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f82c 	bl	800249a <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e022      	b.n	8002492 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d10e      	bne.n	8002478 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800245a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f816 	bl	800249a <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e00c      	b.n	8002492 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024aa:	e02c      	b.n	8002506 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d028      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <UART_WaitOnFlagUntilTimeout+0x30>
 80024ba:	f7fd fed1 	bl	8000260 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d21d      	bcs.n	8002506 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e00f      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d0c3      	beq.n	80024ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002534:	f7fd fe4e 	bl	80001d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002538:	f000 f814 	bl	8002564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800253c:	f000 f8a0 	bl	8002680 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002540:	f000 f86e 	bl	8002620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World");
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <main+0x2c>)
 8002546:	f000 fb73 	bl	8002c30 <printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello");
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <main+0x30>)
 800254c:	f000 fb70 	bl	8002c30 <printf>
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8002550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002554:	f7fd fe90 	bl	8000278 <HAL_Delay>
	  printf("Hello");
 8002558:	e7f7      	b.n	800254a <main+0x1a>
 800255a:	bf00      	nop
 800255c:	08002d90 	.word	0x08002d90
 8002560:	08002d9c 	.word	0x08002d9c

08002564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b0a6      	sub	sp, #152	; 0x98
 8002568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800256e:	2228      	movs	r2, #40	; 0x28
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fbf8 	bl	8002d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002578:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2258      	movs	r2, #88	; 0x58
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fbea 	bl	8002d68 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002594:	2302      	movs	r3, #2
 8002596:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002598:	2301      	movs	r3, #1
 800259a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800259c:	2310      	movs	r3, #16
 800259e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f8ee 	bl	80007a4 <HAL_RCC_OscConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80025ce:	f000 f893 	bl	80026f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d2:	230f      	movs	r3, #15
 80025d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d6:	2302      	movs	r3, #2
 80025d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ffc6 	bl	8001580 <HAL_RCC_ClockConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025fa:	f000 f87d 	bl	80026f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025fe:	2301      	movs	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f9ef 	bl	80019ec <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002614:	f000 f870 	bl	80026f8 <Error_Handler>
  }
}
 8002618:	bf00      	nop
 800261a:	3798      	adds	r7, #152	; 0x98
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <MX_USART1_UART_Init+0x5c>)
 8002628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <MX_USART1_UART_Init+0x58>)
 800262c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_USART1_UART_Init+0x58>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_USART1_UART_Init+0x58>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_USART1_UART_Init+0x58>)
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_USART1_UART_Init+0x58>)
 8002664:	f7ff fbde 	bl	8001e24 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800266e:	f000 f843 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000002c 	.word	0x2000002c
 800267c:	40013800 	.word	0x40013800

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_GPIO_Init+0x74>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <MX_GPIO_Init+0x74>)
 800268c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002690:	6153      	str	r3, [r2, #20]
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_GPIO_Init+0x74>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	6153      	str	r3, [r2, #20]
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	6153      	str	r3, [r2, #20]
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_GPIO_Init+0x74>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_MspInit+0x44>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_MspInit+0x44>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6193      	str	r3, [r2, #24]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_MspInit+0x44>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_MspInit+0x44>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_MspInit+0x44>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_MspInit+0x44>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_UART_MspInit+0x7c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d127      	bne.n	80027c2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6193      	str	r3, [r2, #24]
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_UART_MspInit+0x80>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002794:	6153      	str	r3, [r2, #20]
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_UART_MspInit+0x80>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2307      	movs	r3, #7
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <HAL_UART_MspInit+0x84>)
 80027be:	f7fd fe63 	bl	8000488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	48000800 	.word	0x48000800

080027d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler+0x4>

080027f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler+0x4>

080027f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <UsageFault_Handler+0x4>

080027fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002834:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002844:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002848:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002850:	e000      	b.n	8002854 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8002852:	bf00      	nop
 8002854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f9      	beq.n	8002852 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800285e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e009      	b.n	800289c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	60ba      	str	r2, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ffc9 	bl	8002828 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbf1      	blt.n	8002888 <_write+0x12>
	}
	return len;
 80028a4:	687b      	ldr	r3, [r7, #4]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <SystemInit+0x84>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <SystemInit+0x84>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <SystemInit+0x88>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <SystemInit+0x88>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <SystemInit+0x88>)
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4918      	ldr	r1, [pc, #96]	; (8002938 <SystemInit+0x88>)
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <SystemInit+0x8c>)
 80028d8:	4013      	ands	r3, r2
 80028da:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <SystemInit+0x88>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <SystemInit+0x88>)
 80028e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <SystemInit+0x88>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <SystemInit+0x88>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <SystemInit+0x88>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <SystemInit+0x88>)
 80028fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002902:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <SystemInit+0x88>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <SystemInit+0x88>)
 800290a:	f023 030f 	bic.w	r3, r3, #15
 800290e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <SystemInit+0x88>)
 8002912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002914:	4908      	ldr	r1, [pc, #32]	; (8002938 <SystemInit+0x88>)
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <SystemInit+0x90>)
 8002918:	4013      	ands	r3, r2
 800291a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x88>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SystemInit+0x84>)
 8002924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002928:	609a      	str	r2, [r3, #8]
#endif
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00
 8002938:	40021000 	.word	0x40021000
 800293c:	f87fc00c 	.word	0xf87fc00c
 8002940:	ff00fccc 	.word	0xff00fccc

08002944 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002954:	e004      	b.n	8002960 <ts_itoa+0x1c>
		div *= base;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	fbb2 f2f3 	udiv	r2, r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d2f3      	bcs.n	8002956 <ts_itoa+0x12>

	while (div != 0)
 800296e:	e029      	b.n	80029c4 <ts_itoa+0x80>
	{
		int num = d/div;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	613b      	str	r3, [r7, #16]
		d = d%div;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002982:	fb02 f201 	mul.w	r2, r2, r1
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	60bb      	str	r3, [r7, #8]
		div /= base;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b09      	cmp	r3, #9
 8002998:	dd0a      	ble.n	80029b0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1c58      	adds	r0, r3, #1
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	6008      	str	r0, [r1, #0]
 80029a8:	3237      	adds	r2, #55	; 0x37
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e009      	b.n	80029c4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c58      	adds	r0, r3, #1
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	6008      	str	r0, [r1, #0]
 80029be:	3230      	adds	r2, #48	; 0x30
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1d2      	bne.n	8002970 <ts_itoa+0x2c>
	}
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b088      	sub	sp, #32
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80029e6:	e07d      	b.n	8002ae4 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b25      	cmp	r3, #37	; 0x25
 80029ee:	d171      	bne.n	8002ad4 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d01e      	beq.n	8002a3c <ts_formatstring+0x66>
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	dc06      	bgt.n	8002a10 <ts_formatstring+0x3a>
 8002a02:	2b58      	cmp	r3, #88	; 0x58
 8002a04:	d050      	beq.n	8002aa8 <ts_formatstring+0xd2>
 8002a06:	2b63      	cmp	r3, #99	; 0x63
 8002a08:	d00e      	beq.n	8002a28 <ts_formatstring+0x52>
 8002a0a:	2b25      	cmp	r3, #37	; 0x25
 8002a0c:	d058      	beq.n	8002ac0 <ts_formatstring+0xea>
 8002a0e:	e05d      	b.n	8002acc <ts_formatstring+0xf6>
 8002a10:	2b73      	cmp	r3, #115	; 0x73
 8002a12:	d02b      	beq.n	8002a6c <ts_formatstring+0x96>
 8002a14:	2b73      	cmp	r3, #115	; 0x73
 8002a16:	dc02      	bgt.n	8002a1e <ts_formatstring+0x48>
 8002a18:	2b69      	cmp	r3, #105	; 0x69
 8002a1a:	d00f      	beq.n	8002a3c <ts_formatstring+0x66>
 8002a1c:	e056      	b.n	8002acc <ts_formatstring+0xf6>
 8002a1e:	2b75      	cmp	r3, #117	; 0x75
 8002a20:	d037      	beq.n	8002a92 <ts_formatstring+0xbc>
 8002a22:	2b78      	cmp	r3, #120	; 0x78
 8002a24:	d040      	beq.n	8002aa8 <ts_formatstring+0xd2>
 8002a26:	e051      	b.n	8002acc <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1d1a      	adds	r2, r3, #4
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	60fa      	str	r2, [r7, #12]
 8002a36:	b2ca      	uxtb	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
				break;
 8002a3a:	e047      	b.n	8002acc <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1d1a      	adds	r2, r3, #4
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da07      	bge.n	8002a5c <ts_formatstring+0x86>
					{
						val *= -1;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	425b      	negs	r3, r3
 8002a50:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	60fa      	str	r2, [r7, #12]
 8002a58:	222d      	movs	r2, #45	; 0x2d
 8002a5a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	220a      	movs	r2, #10
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff6d 	bl	8002944 <ts_itoa>
				}
				break;
 8002a6a:	e02f      	b.n	8002acc <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002a76:	e007      	b.n	8002a88 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	1c53      	adds	r3, r2, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1c59      	adds	r1, r3, #1
 8002a82:	60f9      	str	r1, [r7, #12]
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f3      	bne.n	8002a78 <ts_formatstring+0xa2>
					}
				}
				break;
 8002a90:	e01c      	b.n	8002acc <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	1d1a      	adds	r2, r3, #4
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	220a      	movs	r2, #10
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff4f 	bl	8002944 <ts_itoa>
				break;
 8002aa6:	e011      	b.n	8002acc <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff43 	bl	8002944 <ts_itoa>
				break;
 8002abe:	e005      	b.n	8002acc <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60fa      	str	r2, [r7, #12]
 8002ac6:	2225      	movs	r2, #37	; 0x25
 8002ac8:	701a      	strb	r2, [r3, #0]
				  break;
 8002aca:	bf00      	nop
			}
			fmt++;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	e007      	b.n	8002ae4 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	1c53      	adds	r3, r2, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1c59      	adds	r1, r3, #1
 8002ade:	60f9      	str	r1, [r7, #12]
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f af7d 	bne.w	80029e8 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8002b12:	e081      	b.n	8002c18 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b25      	cmp	r3, #37	; 0x25
 8002b1a:	d177      	bne.n	8002c0c <ts_formatlength+0x108>
		{
			++fmt;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3b58      	subs	r3, #88	; 0x58
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d86a      	bhi.n	8002c02 <ts_formatlength+0xfe>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <ts_formatlength+0x30>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002bf5 	.word	0x08002bf5
 8002b38:	08002c03 	.word	0x08002c03
 8002b3c:	08002c03 	.word	0x08002c03
 8002b40:	08002c03 	.word	0x08002c03
 8002b44:	08002c03 	.word	0x08002c03
 8002b48:	08002c03 	.word	0x08002c03
 8002b4c:	08002c03 	.word	0x08002c03
 8002b50:	08002c03 	.word	0x08002c03
 8002b54:	08002c03 	.word	0x08002c03
 8002b58:	08002c03 	.word	0x08002c03
 8002b5c:	08002c03 	.word	0x08002c03
 8002b60:	08002bb9 	.word	0x08002bb9
 8002b64:	08002bc7 	.word	0x08002bc7
 8002b68:	08002c03 	.word	0x08002c03
 8002b6c:	08002c03 	.word	0x08002c03
 8002b70:	08002c03 	.word	0x08002c03
 8002b74:	08002c03 	.word	0x08002c03
 8002b78:	08002bc7 	.word	0x08002bc7
 8002b7c:	08002c03 	.word	0x08002c03
 8002b80:	08002c03 	.word	0x08002c03
 8002b84:	08002c03 	.word	0x08002c03
 8002b88:	08002c03 	.word	0x08002c03
 8002b8c:	08002c03 	.word	0x08002c03
 8002b90:	08002c03 	.word	0x08002c03
 8002b94:	08002c03 	.word	0x08002c03
 8002b98:	08002c03 	.word	0x08002c03
 8002b9c:	08002c03 	.word	0x08002c03
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002c03 	.word	0x08002c03
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002c03 	.word	0x08002c03
 8002bb0:	08002c03 	.word	0x08002c03
 8002bb4:	08002bf5 	.word	0x08002bf5
			{
			  case 'c':
		  		  va_arg(va, int);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	603b      	str	r3, [r7, #0]
				  ++length;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
				  break;
 8002bc4:	e025      	b.n	8002c12 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	330b      	adds	r3, #11
 8002bca:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	603b      	str	r3, [r7, #0]
				  break;
 8002bd2:	e01e      	b.n	8002c12 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	603a      	str	r2, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8002bde:	e002      	b.n	8002be6 <ts_formatlength+0xe2>
			  			  ++length;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	60ba      	str	r2, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f6      	bne.n	8002be0 <ts_formatlength+0xdc>
			  	  }
				  break;
 8002bf2:	e00e      	b.n	8002c12 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	603b      	str	r3, [r7, #0]
				  break;
 8002c00:	e007      	b.n	8002c12 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
				  break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3301      	adds	r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f af79 	bne.w	8002b14 <ts_formatlength+0x10>
	}
	return length;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8002c30:	b40f      	push	{r0, r1, r2, r3}
 8002c32:	b5b0      	push	{r4, r5, r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
	int length = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	6a38      	ldr	r0, [r7, #32]
 8002c46:	f7ff ff5d 	bl	8002b04 <ts_formatlength>
 8002c4a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8002c4c:	466b      	mov	r3, sp
 8002c4e:	461d      	mov	r5, r3
		char buf[length];
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	1e43      	subs	r3, r0, #1
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	00d4      	lsls	r4, r2, #3
 8002c68:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c6c:	00cb      	lsls	r3, r1, #3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	00d4      	lsls	r4, r2, #3
 8002c80:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c84:	00cb      	lsls	r3, r1, #3
 8002c86:	4603      	mov	r3, r0
 8002c88:	3307      	adds	r3, #7
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	ebad 0d03 	sub.w	sp, sp, r3
 8002c92:	466b      	mov	r3, sp
 8002c94:	3300      	adds	r3, #0
 8002c96:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fe96 	bl	80029d6 <ts_formatstring>
 8002caa:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7ff fddf 	bl	8002876 <_write>
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002cc8:	b004      	add	sp, #16
 8002cca:	4770      	bx	lr

08002ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cd2:	e003      	b.n	8002cdc <LoopCopyDataInit>

08002cd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cda:	3104      	adds	r1, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ce0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ce2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ce4:	d3f6      	bcc.n	8002cd4 <CopyDataInit>
	ldr	r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ce8:	e002      	b.n	8002cf0 <LoopFillZerobss>

08002cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002cec:	f842 3b04 	str.w	r3, [r2], #4

08002cf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <LoopForever+0x16>)
	cmp	r2, r3
 8002cf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cf4:	d3f9      	bcc.n	8002cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cf6:	f7ff fddb 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f000 f811 	bl	8002d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cfe:	f7ff fc17 	bl	8002530 <main>

08002d02 <LoopForever>:

LoopForever:
    b LoopForever
 8002d02:	e7fe      	b.n	8002d02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d04:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8002d08:	08002de4 	.word	0x08002de4
	ldr	r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d10:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002d14:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002d18:	2000009c 	.word	0x2000009c

08002d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC1_2_IRQHandler>
	...

08002d20 <__libc_init_array>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4e0d      	ldr	r6, [pc, #52]	; (8002d58 <__libc_init_array+0x38>)
 8002d24:	4c0d      	ldr	r4, [pc, #52]	; (8002d5c <__libc_init_array+0x3c>)
 8002d26:	1ba4      	subs	r4, r4, r6
 8002d28:	10a4      	asrs	r4, r4, #2
 8002d2a:	2500      	movs	r5, #0
 8002d2c:	42a5      	cmp	r5, r4
 8002d2e:	d109      	bne.n	8002d44 <__libc_init_array+0x24>
 8002d30:	4e0b      	ldr	r6, [pc, #44]	; (8002d60 <__libc_init_array+0x40>)
 8002d32:	4c0c      	ldr	r4, [pc, #48]	; (8002d64 <__libc_init_array+0x44>)
 8002d34:	f000 f820 	bl	8002d78 <_init>
 8002d38:	1ba4      	subs	r4, r4, r6
 8002d3a:	10a4      	asrs	r4, r4, #2
 8002d3c:	2500      	movs	r5, #0
 8002d3e:	42a5      	cmp	r5, r4
 8002d40:	d105      	bne.n	8002d4e <__libc_init_array+0x2e>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d48:	4798      	blx	r3
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	e7ee      	b.n	8002d2c <__libc_init_array+0xc>
 8002d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d52:	4798      	blx	r3
 8002d54:	3501      	adds	r5, #1
 8002d56:	e7f2      	b.n	8002d3e <__libc_init_array+0x1e>
 8002d58:	08002ddc 	.word	0x08002ddc
 8002d5c:	08002ddc 	.word	0x08002ddc
 8002d60:	08002ddc 	.word	0x08002ddc
 8002d64:	08002de0 	.word	0x08002de0

08002d68 <memset>:
 8002d68:	4402      	add	r2, r0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <memset+0xa>
 8002d70:	4770      	bx	lr
 8002d72:	f803 1b01 	strb.w	r1, [r3], #1
 8002d76:	e7f9      	b.n	8002d6c <memset+0x4>

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
