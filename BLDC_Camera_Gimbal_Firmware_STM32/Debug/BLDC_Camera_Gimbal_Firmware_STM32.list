
BLDC_Camera_Gimbal_Firmware_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004620  08004620  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004620  08004620  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004620  08004620  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  2000000c  08004634  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001020  08004634  00021020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193d0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003242  00000000  00000000  0003940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  0003c650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  0003d700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002008c  00000000  00000000  0003e668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9fe  00000000  00000000  0005e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3e2b  00000000  00000000  0006d0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  00120f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045a0 	.word	0x080045a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	080045a0 	.word	0x080045a0

080001e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a07      	ldr	r2, [pc, #28]	; (8000208 <HAL_Init+0x28>)
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f8d4 	bl	800039e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f003 feae 	bl	8003f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f003 fe40 	bl	8003e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40022000 	.word	0x40022000

0800020c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <HAL_IncTick+0x20>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <HAL_IncTick+0x24>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4413      	add	r3, r2
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <HAL_IncTick+0x24>)
 800021e:	6013      	str	r3, [r2, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	20000f68 	.word	0x20000f68

08000234 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return uwTick;  
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_GetTick+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000f68 	.word	0x20000f68

0800024c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f003 0307 	and.w	r3, r3, #7
 800025a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <NVIC_SetPriorityGrouping+0x44>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000268:	4013      	ands	r3, r2
 800026a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <NVIC_SetPriorityGrouping+0x44>)
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	60d3      	str	r3, [r2, #12]
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <NVIC_GetPriorityGrouping+0x18>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	f003 0307 	and.w	r3, r3, #7
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <NVIC_EnableIRQ+0x30>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da0b      	bge.n	8000310 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	490c      	ldr	r1, [pc, #48]	; (8000330 <NVIC_SetPriority+0x4c>)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	3b04      	subs	r3, #4
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030e:	e009      	b.n	8000324 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4907      	ldr	r1, [pc, #28]	; (8000334 <NVIC_SetPriority+0x50>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000338:	b480      	push	{r7}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	f1c3 0307 	rsb	r3, r3, #7
 8000352:	2b04      	cmp	r3, #4
 8000354:	bf28      	it	cs
 8000356:	2304      	movcs	r3, #4
 8000358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3304      	adds	r3, #4
 800035e:	2b06      	cmp	r3, #6
 8000360:	d902      	bls.n	8000368 <NVIC_EncodePriority+0x30>
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	3b03      	subs	r3, #3
 8000366:	e000      	b.n	800036a <NVIC_EncodePriority+0x32>
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	f04f 32ff 	mov.w	r2, #4294967295
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	43da      	mvns	r2, r3
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	401a      	ands	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000380:	f04f 31ff 	mov.w	r1, #4294967295
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	43d9      	mvns	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	4313      	orrs	r3, r2
         );
}
 8000392:	4618      	mov	r0, r3
 8000394:	3724      	adds	r7, #36	; 0x24
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ff50 	bl	800024c <NVIC_SetPriorityGrouping>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
 80003c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c6:	f7ff ff65 	bl	8000294 <NVIC_GetPriorityGrouping>
 80003ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	68b9      	ldr	r1, [r7, #8]
 80003d0:	6978      	ldr	r0, [r7, #20]
 80003d2:	f7ff ffb1 	bl	8000338 <NVIC_EncodePriority>
 80003d6:	4602      	mov	r2, r0
 80003d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff80 	bl	80002e4 <NVIC_SetPriority>
}
 80003e4:	bf00      	nop
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff58 	bl	80002b0 <NVIC_EnableIRQ>
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000408:	b480      	push	{r7}
 800040a:	b087      	sub	sp, #28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800041e:	e160      	b.n	80006e2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	2101      	movs	r1, #1
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	4013      	ands	r3, r2
 800042e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f000 8152 	beq.w	80006dc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d003      	beq.n	8000448 <HAL_GPIO_Init+0x40>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	2b12      	cmp	r3, #18
 8000446:	d123      	bne.n	8000490 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	08da      	lsrs	r2, r3, #3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3208      	adds	r2, #8
 8000450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000454:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	220f      	movs	r2, #15
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	693a      	ldr	r2, [r7, #16]
 8000468:	4013      	ands	r3, r2
 800046a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	691a      	ldr	r2, [r3, #16]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	4313      	orrs	r3, r2
 8000480:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	08da      	lsrs	r2, r3, #3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3208      	adds	r2, #8
 800048a:	6939      	ldr	r1, [r7, #16]
 800048c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	2203      	movs	r2, #3
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	4013      	ands	r3, r2
 80004a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	f003 0203 	and.w	r2, r3, #3
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	693a      	ldr	r2, [r7, #16]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	693a      	ldr	r2, [r7, #16]
 80004c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d00b      	beq.n	80004e4 <HAL_GPIO_Init+0xdc>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d007      	beq.n	80004e4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d8:	2b11      	cmp	r3, #17
 80004da:	d003      	beq.n	80004e4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b12      	cmp	r3, #18
 80004e2:	d130      	bne.n	8000546 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	2203      	movs	r2, #3
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	4013      	ands	r3, r2
 80004fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68da      	ldr	r2, [r3, #12]
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	4313      	orrs	r3, r2
 800050c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800051a:	2201      	movs	r2, #1
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	43db      	mvns	r3, r3
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4013      	ands	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	091b      	lsrs	r3, r3, #4
 8000530:	f003 0201 	and.w	r2, r3, #1
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	4313      	orrs	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	2203      	movs	r2, #3
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	4013      	ands	r3, r2
 800055c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	4313      	orrs	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	2b00      	cmp	r3, #0
 8000580:	f000 80ac 	beq.w	80006dc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000584:	4b5e      	ldr	r3, [pc, #376]	; (8000700 <HAL_GPIO_Init+0x2f8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a5d      	ldr	r2, [pc, #372]	; (8000700 <HAL_GPIO_Init+0x2f8>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b5b      	ldr	r3, [pc, #364]	; (8000700 <HAL_GPIO_Init+0x2f8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800059c:	4a59      	ldr	r2, [pc, #356]	; (8000704 <HAL_GPIO_Init+0x2fc>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	089b      	lsrs	r3, r3, #2
 80005a2:	3302      	adds	r3, #2
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005c6:	d025      	beq.n	8000614 <HAL_GPIO_Init+0x20c>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a4f      	ldr	r2, [pc, #316]	; (8000708 <HAL_GPIO_Init+0x300>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d01f      	beq.n	8000610 <HAL_GPIO_Init+0x208>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a4e      	ldr	r2, [pc, #312]	; (800070c <HAL_GPIO_Init+0x304>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d019      	beq.n	800060c <HAL_GPIO_Init+0x204>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <HAL_GPIO_Init+0x308>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d013      	beq.n	8000608 <HAL_GPIO_Init+0x200>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a4c      	ldr	r2, [pc, #304]	; (8000714 <HAL_GPIO_Init+0x30c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d00d      	beq.n	8000604 <HAL_GPIO_Init+0x1fc>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a4b      	ldr	r2, [pc, #300]	; (8000718 <HAL_GPIO_Init+0x310>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d007      	beq.n	8000600 <HAL_GPIO_Init+0x1f8>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a4a      	ldr	r2, [pc, #296]	; (800071c <HAL_GPIO_Init+0x314>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d101      	bne.n	80005fc <HAL_GPIO_Init+0x1f4>
 80005f8:	2306      	movs	r3, #6
 80005fa:	e00c      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 80005fc:	2307      	movs	r3, #7
 80005fe:	e00a      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 8000600:	2305      	movs	r3, #5
 8000602:	e008      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 8000604:	2304      	movs	r3, #4
 8000606:	e006      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 8000608:	2303      	movs	r3, #3
 800060a:	e004      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 800060c:	2302      	movs	r3, #2
 800060e:	e002      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <HAL_GPIO_Init+0x20e>
 8000614:	2300      	movs	r3, #0
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	f002 0203 	and.w	r2, r2, #3
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	4093      	lsls	r3, r2
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	4313      	orrs	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000626:	4937      	ldr	r1, [pc, #220]	; (8000704 <HAL_GPIO_Init+0x2fc>)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	089b      	lsrs	r3, r3, #2
 800062c:	3302      	adds	r3, #2
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000634:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <HAL_GPIO_Init+0x318>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	43db      	mvns	r3, r3
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	4013      	ands	r3, r2
 8000642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000658:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_GPIO_Init+0x318>)
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800065e:	4b30      	ldr	r3, [pc, #192]	; (8000720 <HAL_GPIO_Init+0x318>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	43db      	mvns	r3, r3
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	4013      	ands	r3, r2
 800066c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4313      	orrs	r3, r2
 8000680:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <HAL_GPIO_Init+0x318>)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x318>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	43db      	mvns	r3, r3
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_GPIO_Init+0x318>)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x318>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_GPIO_Init+0x318>)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f47f ae97 	bne.w	8000420 <HAL_GPIO_Init+0x18>
  }
}
 80006f2:	bf00      	nop
 80006f4:	371c      	adds	r7, #28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000
 8000708:	48000400 	.word	0x48000400
 800070c:	48000800 	.word	0x48000800
 8000710:	48000c00 	.word	0x48000c00
 8000714:	48001000 	.word	0x48001000
 8000718:	48001400 	.word	0x48001400
 800071c:	48001800 	.word	0x48001800
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800072a:	af00      	add	r7, sp, #0
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	f000 beda 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	f000 8164 	beq.w	8000a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800074e:	4bb0      	ldr	r3, [pc, #704]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f003 030c 	and.w	r3, r3, #12
 8000756:	2b04      	cmp	r3, #4
 8000758:	d00c      	beq.n	8000774 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800075a:	4bad      	ldr	r3, [pc, #692]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f003 030c 	and.w	r3, r3, #12
 8000762:	2b08      	cmp	r3, #8
 8000764:	d15a      	bne.n	800081c <HAL_RCC_OscConfig+0xf8>
 8000766:	4baa      	ldr	r3, [pc, #680]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800076e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000772:	d153      	bne.n	800081c <HAL_RCC_OscConfig+0xf8>
 8000774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000778:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000780:	fa93 f3a3 	rbit	r3, r3
 8000784:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000788:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800078c:	fab3 f383 	clz	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b01      	cmp	r3, #1
 800079e:	d102      	bne.n	80007a6 <HAL_RCC_OscConfig+0x82>
 80007a0:	4b9b      	ldr	r3, [pc, #620]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	e015      	b.n	80007d2 <HAL_RCC_OscConfig+0xae>
 80007a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80007b2:	fa93 f3a3 	rbit	r3, r3
 80007b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80007ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80007c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80007ce:	4b90      	ldr	r3, [pc, #576]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007d6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80007da:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80007de:	fa92 f2a2 	rbit	r2, r2
 80007e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80007e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	b252      	sxtb	r2, r2
 80007f0:	f042 0220 	orr.w	r2, r2, #32
 80007f4:	b252      	sxtb	r2, r2
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	f002 021f 	and.w	r2, r2, #31
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4013      	ands	r3, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 8105 	beq.w	8000a14 <HAL_RCC_OscConfig+0x2f0>
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	f040 80ff 	bne.w	8000a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	f000 be6b 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000826:	d106      	bne.n	8000836 <HAL_RCC_OscConfig+0x112>
 8000828:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a78      	ldr	r2, [pc, #480]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800082e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e030      	b.n	8000898 <HAL_RCC_OscConfig+0x174>
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10c      	bne.n	800085a <HAL_RCC_OscConfig+0x136>
 8000840:	4b73      	ldr	r3, [pc, #460]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a72      	ldr	r2, [pc, #456]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a6f      	ldr	r2, [pc, #444]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e01e      	b.n	8000898 <HAL_RCC_OscConfig+0x174>
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000864:	d10c      	bne.n	8000880 <HAL_RCC_OscConfig+0x15c>
 8000866:	4b6a      	ldr	r3, [pc, #424]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a69      	ldr	r2, [pc, #420]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800086c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	4b67      	ldr	r3, [pc, #412]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e00b      	b.n	8000898 <HAL_RCC_OscConfig+0x174>
 8000880:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a5f      	ldr	r2, [pc, #380]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 8000892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000896:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d05a      	beq.n	8000958 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a2:	f7ff fcc7 	bl	8000234 <HAL_GetTick>
 80008a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	e00a      	b.n	80008c2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fcc2 	bl	8000234 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	2b64      	cmp	r3, #100	; 0x64
 80008ba:	d902      	bls.n	80008c2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80008bc:	2303      	movs	r3, #3
 80008be:	f000 be18 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
 80008c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ca:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80008ce:	fa93 f3a3 	rbit	r3, r3
 80008d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80008d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <HAL_RCC_OscConfig+0x1d0>
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	e015      	b.n	8000920 <HAL_RCC_OscConfig+0x1fc>
 80008f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000900:	fa93 f3a3 	rbit	r3, r3
 8000904:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000910:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000924:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000928:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800092c:	fa92 f2a2 	rbit	r2, r2
 8000930:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000934:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000938:	fab2 f282 	clz	r2, r2
 800093c:	b252      	sxtb	r2, r2
 800093e:	f042 0220 	orr.w	r2, r2, #32
 8000942:	b252      	sxtb	r2, r2
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	f002 021f 	and.w	r2, r2, #31
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4013      	ands	r3, r2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0aa      	beq.n	80008ac <HAL_RCC_OscConfig+0x188>
 8000956:	e05e      	b.n	8000a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000958:	f7ff fc6c 	bl	8000234 <HAL_GetTick>
 800095c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000960:	e00a      	b.n	8000978 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000962:	f7ff fc67 	bl	8000234 <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	2b64      	cmp	r3, #100	; 0x64
 8000970:	d902      	bls.n	8000978 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000972:	2303      	movs	r3, #3
 8000974:	f000 bdbd 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000984:	fa93 f3a3 	rbit	r3, r3
 8000988:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 800098c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	fab3 f383 	clz	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d102      	bne.n	80009aa <HAL_RCC_OscConfig+0x286>
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	e015      	b.n	80009d6 <HAL_RCC_OscConfig+0x2b2>
 80009aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80009be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80009c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80009ca:	fa93 f3a3 	rbit	r3, r3
 80009ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_RCC_OscConfig+0x2ec>)
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80009de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80009e2:	fa92 f2a2 	rbit	r2, r2
 80009e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80009ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	b252      	sxtb	r2, r2
 80009f4:	f042 0220 	orr.w	r2, r2, #32
 80009f8:	b252      	sxtb	r2, r2
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	f002 021f 	and.w	r2, r2, #31
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1aa      	bne.n	8000962 <HAL_RCC_OscConfig+0x23e>
 8000a0c:	e003      	b.n	8000a16 <HAL_RCC_OscConfig+0x2f2>
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8171 	beq.w	8000d08 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a26:	4bd0      	ldr	r3, [pc, #832]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 030c 	and.w	r3, r3, #12
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00c      	beq.n	8000a4c <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a32:	4bcd      	ldr	r3, [pc, #820]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d16e      	bne.n	8000b1c <HAL_RCC_OscConfig+0x3f8>
 8000a3e:	4bca      	ldr	r3, [pc, #808]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a4a:	d167      	bne.n	8000b1c <HAL_RCC_OscConfig+0x3f8>
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000a56:	fa93 f3a3 	rbit	r3, r3
 8000a5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000a5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	095b      	lsrs	r3, r3, #5
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d102      	bne.n	8000a7c <HAL_RCC_OscConfig+0x358>
 8000a76:	4bbc      	ldr	r3, [pc, #752]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	e013      	b.n	8000aa4 <HAL_RCC_OscConfig+0x380>
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000a86:	fa93 f3a3 	rbit	r3, r3
 8000a8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000a94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000aa0:	4bb1      	ldr	r3, [pc, #708]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000aaa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000aae:	fa92 f2a2 	rbit	r2, r2
 8000ab2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000ab6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	b252      	sxtb	r2, r2
 8000ac0:	f042 0220 	orr.w	r2, r2, #32
 8000ac4:	b252      	sxtb	r2, r2
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	f002 021f 	and.w	r2, r2, #31
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x3c4>
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d002      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f000 bd05 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ae8:	4b9f      	ldr	r3, [pc, #636]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6919      	ldr	r1, [r3, #16]
 8000af6:	23f8      	movs	r3, #248	; 0xf8
 8000af8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b00:	fa93 f3a3 	rbit	r3, r3
 8000b04:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b08:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	4994      	ldr	r1, [pc, #592]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b1a:	e0f5      	b.n	8000d08 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8085 	beq.w	8000c32 <HAL_RCC_OscConfig+0x50e>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000b3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b3e:	fab3 f383 	clz	r3, r3
 8000b42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2301      	movs	r3, #1
 8000b50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b52:	f7ff fb6f 	bl	8000234 <HAL_GetTick>
 8000b56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5a:	e00a      	b.n	8000b72 <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b5c:	f7ff fb6a 	bl	8000234 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d902      	bls.n	8000b72 <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f000 bcc0 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000b84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b88:	fab3 f383 	clz	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d102      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x47e>
 8000b9c:	4b72      	ldr	r3, [pc, #456]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	e013      	b.n	8000bca <HAL_RCC_OscConfig+0x4a6>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000bba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000bc6:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	2202      	movs	r2, #2
 8000bcc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000bd0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000bd4:	fa92 f2a2 	rbit	r2, r2
 8000bd8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000bdc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b252      	sxtb	r2, r2
 8000be6:	f042 0220 	orr.w	r2, r2, #32
 8000bea:	b252      	sxtb	r2, r2
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	f002 021f 	and.w	r2, r2, #31
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0ae      	beq.n	8000b5c <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfe:	4b5a      	ldr	r3, [pc, #360]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6919      	ldr	r1, [r3, #16]
 8000c0c:	23f8      	movs	r3, #248	; 0xf8
 8000c0e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c12:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c16:	fa93 f3a3 	rbit	r3, r3
 8000c1a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000c1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c22:	fab3 f383 	clz	r3, r3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	494f      	ldr	r1, [pc, #316]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e06a      	b.n	8000d08 <HAL_RCC_OscConfig+0x5e4>
 8000c32:	2301      	movs	r3, #1
 8000c34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000c44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	461a      	mov	r2, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff faea 	bl	8000234 <HAL_GetTick>
 8000c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c64:	e00a      	b.n	8000c7c <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c66:	f7ff fae5 	bl	8000234 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d902      	bls.n	8000c7c <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	f000 bc3b 	b.w	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000c8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <HAL_RCC_OscConfig+0x588>
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	e013      	b.n	8000cd4 <HAL_RCC_OscConfig+0x5b0>
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000cc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <HAL_RCC_OscConfig+0x644>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000cda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000cde:	fa92 f2a2 	rbit	r2, r2
 8000ce2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000ce6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	b252      	sxtb	r2, r2
 8000cf0:	f042 0220 	orr.w	r2, r2, #32
 8000cf4:	b252      	sxtb	r2, r2
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	f002 021f 	and.w	r2, r2, #31
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1ae      	bne.n	8000c66 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80d7 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d066      	beq.n	8000df0 <HAL_RCC_OscConfig+0x6cc>
 8000d22:	2301      	movs	r3, #1
 8000d24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000d34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_RCC_OscConfig+0x648>)
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	461a      	mov	r2, r3
 8000d46:	2301      	movs	r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fa73 	bl	8000234 <HAL_GetTick>
 8000d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	e00d      	b.n	8000d70 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d54:	f7ff fa6e 	bl	8000234 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d905      	bls.n	8000d70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e3c4      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	10908120 	.word	0x10908120
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d8c:	fa93 f2a3 	rbit	r2, r3
 8000d90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	fa93 f2a3 	rbit	r2, r3
 8000da8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000dac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	4ba5      	ldr	r3, [pc, #660]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000db6:	2102      	movs	r1, #2
 8000db8:	6019      	str	r1, [r3, #0]
 8000dba:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	fa93 f1a3 	rbit	r1, r3
 8000dc4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000dc8:	6019      	str	r1, [r3, #0]
  return(result);
 8000dca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	fab3 f383 	clz	r3, r3
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0b2      	beq.n	8000d54 <HAL_RCC_OscConfig+0x630>
 8000dee:	e06a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x7a2>
 8000df0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	fa93 f2a3 	rbit	r2, r3
 8000e02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e06:	601a      	str	r2, [r3, #0]
  return(result);
 8000e08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0e:	fab3 f383 	clz	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b8c      	ldr	r3, [pc, #560]	; (8001048 <HAL_RCC_OscConfig+0x924>)
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e20:	f7ff fa08 	bl	8000234 <HAL_GetTick>
 8000e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	e009      	b.n	8000e3e <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fa03 	bl	8000234 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e359      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000e3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e42:	2202      	movs	r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	fa93 f2a3 	rbit	r2, r3
 8000e50:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	fa93 f2a3 	rbit	r2, r3
 8000e68:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e72:	2202      	movs	r2, #2
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	fa93 f2a3 	rbit	r2, r3
 8000e80:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000e84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8e:	2102      	movs	r1, #2
 8000e90:	6019      	str	r1, [r3, #0]
 8000e92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	fa93 f1a3 	rbit	r1, r3
 8000e9c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ea0:	6019      	str	r1, [r3, #0]
  return(result);
 8000ea2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1b1      	bne.n	8000e2a <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 8159 	beq.w	8001188 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d112      	bne.n	8000f0e <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	4b56      	ldr	r3, [pc, #344]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4a55      	ldr	r2, [pc, #340]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	61d3      	str	r3, [r2, #28]
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b4f      	ldr	r3, [pc, #316]	; (800104c <HAL_RCC_OscConfig+0x928>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d11a      	bne.n	8000f50 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_OscConfig+0x928>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_RCC_OscConfig+0x928>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f26:	f7ff f985 	bl	8000234 <HAL_GetTick>
 8000f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	e009      	b.n	8000f44 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f30:	f7ff f980 	bl	8000234 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e2d6      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_RCC_OscConfig+0x928>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0ef      	beq.n	8000f30 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d106      	bne.n	8000f68 <HAL_RCC_OscConfig+0x844>
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a39      	ldr	r2, [pc, #228]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	e02f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x8a4>
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x868>
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a33      	ldr	r2, [pc, #204]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	6213      	str	r3, [r2, #32]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f84:	f023 0304 	bic.w	r3, r3, #4
 8000f88:	6213      	str	r3, [r2, #32]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0x8a4>
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x88c>
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0x8a4>
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a23      	ldr	r2, [pc, #140]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a20      	ldr	r2, [pc, #128]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8000fc2:	f023 0304 	bic.w	r3, r3, #4
 8000fc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d06b      	beq.n	80010aa <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff f92f 	bl	8000234 <HAL_GetTick>
 8000fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fdc:	f7ff f92a 	bl	8000234 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e27e      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 8000ff4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	fa93 f2a3 	rbit	r2, r3
 8001006:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001010:	2202      	movs	r2, #2
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	fa93 f2a3 	rbit	r2, r3
 800101e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001022:	601a      	str	r2, [r3, #0]
  return(result);
 8001024:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001028:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	095b      	lsrs	r3, r3, #5
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d108      	bne.n	8001050 <HAL_RCC_OscConfig+0x92c>
 800103e:	4b01      	ldr	r3, [pc, #4]	; (8001044 <HAL_RCC_OscConfig+0x920>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	e013      	b.n	800106c <HAL_RCC_OscConfig+0x948>
 8001044:	40021000 	.word	0x40021000
 8001048:	10908120 	.word	0x10908120
 800104c:	40007000 	.word	0x40007000
 8001050:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	fa93 f2a3 	rbit	r2, r3
 8001062:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	4bc0      	ldr	r3, [pc, #768]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001070:	2102      	movs	r1, #2
 8001072:	6011      	str	r1, [r2, #0]
 8001074:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	fa92 f1a2 	rbit	r1, r2
 800107e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001082:	6011      	str	r1, [r2, #0]
  return(result);
 8001084:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	fab2 f282 	clz	r2, r2
 800108e:	b252      	sxtb	r2, r2
 8001090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001094:	b252      	sxtb	r2, r2
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	f002 021f 	and.w	r2, r2, #31
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d099      	beq.n	8000fdc <HAL_RCC_OscConfig+0x8b8>
 80010a8:	e064      	b.n	8001174 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff f8c3 	bl	8000234 <HAL_GetTick>
 80010ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff f8be 	bl	8000234 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e212      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 80010cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d0:	2202      	movs	r2, #2
 80010d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	fa93 f2a3 	rbit	r2, r3
 80010de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e8:	2202      	movs	r2, #2
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	fa93 f2a3 	rbit	r2, r3
 80010f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010fa:	601a      	str	r2, [r3, #0]
  return(result);
 80010fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001100:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	095b      	lsrs	r3, r3, #5
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0x9f8>
 8001116:	4b95      	ldr	r3, [pc, #596]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	e00d      	b.n	8001138 <HAL_RCC_OscConfig+0xa14>
 800111c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	fa93 f2a3 	rbit	r2, r3
 800112e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4b8d      	ldr	r3, [pc, #564]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800113c:	2102      	movs	r1, #2
 800113e:	6011      	str	r1, [r2, #0]
 8001140:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	fa92 f1a2 	rbit	r1, r2
 800114a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800114e:	6011      	str	r1, [r2, #0]
  return(result);
 8001150:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	b252      	sxtb	r2, r2
 800115c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001160:	b252      	sxtb	r2, r2
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f002 021f 	and.w	r2, r2, #31
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d19f      	bne.n	80010b4 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001174:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117c:	4b7b      	ldr	r3, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a7a      	ldr	r2, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001186:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 81ae 	beq.w	80014f0 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b75      	ldr	r3, [pc, #468]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	f000 81a5 	beq.w	80014ec <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	f040 811d 	bne.w	80013e8 <HAL_RCC_OscConfig+0xcc4>
 80011ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	fa93 f2a3 	rbit	r2, r3
 80011c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80011c6:	601a      	str	r2, [r3, #0]
  return(result);
 80011c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80011cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	461a      	mov	r2, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff f827 	bl	8000234 <HAL_GetTick>
 80011e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	e009      	b.n	8001200 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff f822 	bl	8000234 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e178      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 8001200:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fa93 f2a3 	rbit	r2, r3
 8001214:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001218:	601a      	str	r2, [r3, #0]
  return(result);
 800121a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800121e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d102      	bne.n	800123a <HAL_RCC_OscConfig+0xb16>
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	e01b      	b.n	8001272 <HAL_RCC_OscConfig+0xb4e>
 800123a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800123e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	fa93 f2a3 	rbit	r2, r3
 800124e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	fa93 f2a3 	rbit	r2, r3
 8001268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001276:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800127a:	6011      	str	r1, [r2, #0]
 800127c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	fa92 f1a2 	rbit	r1, r2
 8001286:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800128a:	6011      	str	r1, [r2, #0]
  return(result);
 800128c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b252      	sxtb	r2, r2
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	b252      	sxtb	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f002 021f 	and.w	r2, r2, #31
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d19d      	bne.n	80011ec <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f023 020f 	bic.w	r2, r3, #15
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	492b      	ldr	r1, [pc, #172]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a19      	ldr	r1, [r3, #32]
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	430b      	orrs	r3, r1
 80012da:	4924      	ldr	r1, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	fa93 f2a3 	rbit	r2, r3
 80012f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012f8:	601a      	str	r2, [r3, #0]
  return(result);
 80012fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	461a      	mov	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7fe ff8e 	bl	8000234 <HAL_GetTick>
 8001318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131c:	e009      	b.n	8001332 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7fe ff89 	bl	8000234 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0df      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 8001332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fa93 f2a3 	rbit	r2, r3
 8001346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800134a:	601a      	str	r2, [r3, #0]
  return(result);
 800134c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001350:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d104      	bne.n	8001370 <HAL_RCC_OscConfig+0xc4c>
 8001366:	4b01      	ldr	r3, [pc, #4]	; (800136c <HAL_RCC_OscConfig+0xc48>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xc84>
 800136c:	40021000 	.word	0x40021000
 8001370:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800138e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f2a3 	rbit	r2, r3
 800139e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b55      	ldr	r3, [pc, #340]	; (80014fc <HAL_RCC_OscConfig+0xdd8>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013b0:	6011      	str	r1, [r2, #0]
 80013b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	fa92 f1a2 	rbit	r1, r2
 80013bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013c0:	6011      	str	r1, [r2, #0]
  return(result);
 80013c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b252      	sxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b252      	sxtb	r2, r2
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d09b      	beq.n	800131e <HAL_RCC_OscConfig+0xbfa>
 80013e6:	e083      	b.n	80014f0 <HAL_RCC_OscConfig+0xdcc>
 80013e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f2a3 	rbit	r2, r3
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	601a      	str	r2, [r3, #0]
  return(result);
 8001402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001406:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001408:	fab3 f383 	clz	r3, r3
 800140c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001410:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	461a      	mov	r2, r3
 8001418:	2300      	movs	r3, #0
 800141a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7fe ff0a 	bl	8000234 <HAL_GetTick>
 8001420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	e009      	b.n	800143a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001426:	f7fe ff05 	bl	8000234 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e05b      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	601a      	str	r2, [r3, #0]
  return(result);
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	095b      	lsrs	r3, r3, #5
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0xd50>
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_RCC_OscConfig+0xdd8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0xd88>
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_RCC_OscConfig+0xdd8>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f107 0214 	add.w	r2, r7, #20
 80014b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014b4:	6011      	str	r1, [r2, #0]
 80014b6:	f107 0214 	add.w	r2, r7, #20
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	fa92 f1a2 	rbit	r1, r2
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	6011      	str	r1, [r2, #0]
  return(result);
 80014c6:	f107 0210 	add.w	r2, r7, #16
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	fab2 f282 	clz	r2, r2
 80014d0:	b252      	sxtb	r2, r2
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	b252      	sxtb	r2, r2
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	f002 021f 	and.w	r2, r2, #31
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d19d      	bne.n	8001426 <HAL_RCC_OscConfig+0xd02>
 80014ea:	e001      	b.n	80014f0 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09e      	sub	sp, #120	; 0x78
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e164      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	498d      	ldr	r1, [pc, #564]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e14c      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4981      	ldr	r1, [pc, #516]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80df 	beq.w	8001732 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d13d      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xf8>
 800157c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001580:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800158a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xa6>
 80015a0:	4b71      	ldr	r3, [pc, #452]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e00f      	b.n	80015c6 <HAL_RCC_ClockConfig+0xc6>
 80015a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
 80015b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b8:	663b      	str	r3, [r7, #96]	; 0x60
 80015ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80015cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015ce:	fa92 f2a2 	rbit	r2, r2
 80015d2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80015d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	b252      	sxtb	r2, r2
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	b252      	sxtb	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f002 021f 	and.w	r2, r2, #31
 80015e8:	2101      	movs	r1, #1
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d17d      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0f4      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d13d      	bne.n	800167c <HAL_RCC_ClockConfig+0x17c>
 8001600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800160e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_RCC_ClockConfig+0x12a>
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e00f      	b.n	800164a <HAL_RCC_ClockConfig+0x14a>
 800162a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
 8001638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163c:	643b      	str	r3, [r7, #64]	; 0x40
 800163e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001646:	4b48      	ldr	r3, [pc, #288]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001652:	fa92 f2a2 	rbit	r2, r2
 8001656:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	b252      	sxtb	r2, r2
 8001660:	f042 0220 	orr.w	r2, r2, #32
 8001664:	b252      	sxtb	r2, r2
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d13b      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b2      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
 800167c:	2302      	movs	r3, #2
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x1a4>
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e00d      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1c0>
 80016a4:	2302      	movs	r3, #2
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2202      	movs	r2, #2
 80016c2:	61ba      	str	r2, [r7, #24]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	fa92 f2a2 	rbit	r2, r2
 80016ca:	617a      	str	r2, [r7, #20]
  return(result);
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b252      	sxtb	r2, r2
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	b252      	sxtb	r2, r2
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f002 021f 	and.w	r2, r2, #31
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e078      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 0203 	bic.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	491a      	ldr	r1, [pc, #104]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001702:	f7fe fd97 	bl	8000234 <HAL_GetTick>
 8001706:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001708:	e00a      	b.n	8001720 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7fe fd93 	bl	8000234 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e060      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_ClockConfig+0x268>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 020c 	and.w	r2, r3, #12
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	429a      	cmp	r2, r3
 8001730:	d1eb      	bne.n	800170a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d215      	bcs.n	800176c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 0207 	bic.w	r2, r3, #7
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_ClockConfig+0x264>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d006      	beq.n	800176c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e03f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x2e2>
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_RCC_ClockConfig+0x2ec>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4919      	ldr	r1, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x2ec>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_ClockConfig+0x2ec>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4911      	ldr	r1, [pc, #68]	; (80017ec <HAL_RCC_ClockConfig+0x2ec>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017aa:	f000 f825 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 80017ae:	4601      	mov	r1, r0
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x2ec>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b8:	23f0      	movs	r3, #240	; 0xf0
 80017ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_RCC_ClockConfig+0x2f0>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	fa21 f303 	lsr.w	r3, r1, r3
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_RCC_ClockConfig+0x2f4>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f002 fbbc 	bl	8003f58 <HAL_InitTick>
  
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3778      	adds	r7, #120	; 0x78
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08004608 	.word	0x08004608
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b04      	cmp	r3, #4
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x30>
 8001822:	2b08      	cmp	r3, #8
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x36>
 8001826:	e03f      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800182a:	623b      	str	r3, [r7, #32]
      break;
 800182c:	e03f      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001834:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001838:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	607b      	str	r3, [r7, #4]
  return(result);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f003 020f 	and.w	r2, r3, #15
 800185a:	230f      	movs	r3, #15
 800185c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	60fb      	str	r3, [r7, #12]
  return(result);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	fbb2 f2f3 	udiv	r2, r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e007      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fbb2 f2f3 	udiv	r2, r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	623b      	str	r3, [r7, #32]
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018aa:	623b      	str	r3, [r7, #32]
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	6a3b      	ldr	r3, [r7, #32]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	372c      	adds	r7, #44	; 0x2c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	080045e8 	.word	0x080045e8
 80018c8:	080045f8 	.word	0x080045f8

080018cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80018ea:	f7ff ffef 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 80018ee:	4601      	mov	r1, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018fc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	603b      	str	r3, [r7, #0]
  return(result);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	08004618 	.word	0x08004618

08001928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800192e:	f7ff ffcd 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 8001932:	4601      	mov	r1, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800193c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001940:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	603b      	str	r3, [r7, #0]
  return(result);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	08004618 	.word	0x08004618

0800196c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b092      	sub	sp, #72	; 0x48
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80d6 	beq.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f4:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10e      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	61d3      	str	r3, [r2, #28]
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a40      	ldr	r2, [pc, #256]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7fe fbfd 	bl	8000234 <HAL_GetTick>
 8001a3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7fe fbf9 	bl	8000234 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1d4      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8083 	beq.w	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d07b      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ace:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d04c      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7fe fbab 	bl	8000234 <HAL_GetTick>
 8001ade:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe fba7 	bl	8000234 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e180      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001af8:	2302      	movs	r3, #2
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	2302      	movs	r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d108      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001b26:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	e00d      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40007000 	.word	0x40007000
 8001b34:	10908100 	.word	0x10908100
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2202      	movs	r2, #2
 8001b4a:	613a      	str	r2, [r7, #16]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	fa92 f2a2 	rbit	r2, r2
 8001b52:	60fa      	str	r2, [r7, #12]
  return(result);
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	fab2 f282 	clz	r2, r2
 8001b5a:	b252      	sxtb	r2, r2
 8001b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b60:	b252      	sxtb	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0b6      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b74:	4b90      	ldr	r3, [pc, #576]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	498d      	ldr	r1, [pc, #564]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a89      	ldr	r2, [pc, #548]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba6:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4981      	ldr	r1, [pc, #516]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4979      	ldr	r1, [pc, #484]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001be2:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4972      	ldr	r1, [pc, #456]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f023 0210 	bic.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	496a      	ldr	r1, [pc, #424]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001c1e:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	4963      	ldr	r1, [pc, #396]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f023 0220 	bic.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	495b      	ldr	r1, [pc, #364]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c5a:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	4954      	ldr	r1, [pc, #336]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	494c      	ldr	r1, [pc, #304]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c96:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4945      	ldr	r1, [pc, #276]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	493d      	ldr	r1, [pc, #244]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	4936      	ldr	r1, [pc, #216]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	492e      	ldr	r1, [pc, #184]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	491f      	ldr	r1, [pc, #124]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	4910      	ldr	r1, [pc, #64]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4909      	ldr	r1, [pc, #36]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	4901      	ldr	r1, [pc, #4]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	630b      	str	r3, [r1, #48]	; 0x30
 8001db6:	e001      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001db8:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	490b      	ldr	r1, [pc, #44]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	4904      	ldr	r1, [pc, #16]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3748      	adds	r7, #72	; 0x48
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01d      	b.n	8001e56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f815 	bl	8001e5e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f000 f976 	bl	8002138 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0202 	mvn.w	r2, #2
 8001ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f905 	bl	80020fa <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8f7 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f908 	bl	800210e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8db 	bl	80020fa <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8cd 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8de 	bl	800210e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0208 	mvn.w	r2, #8
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8b1 	bl	80020fa <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8a3 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8b4 	bl	800210e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0210 	mvn.w	r2, #16
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f887 	bl	80020fa <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f879 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f88a 	bl	800210e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0201 	mvn.w	r2, #1
 8002024:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f001 ff14 	bl	8003e54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b80      	cmp	r3, #128	; 0x80
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002050:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f91a 	bl	800228c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	d10e      	bne.n	8002086 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b80      	cmp	r3, #128	; 0x80
 8002074:	d107      	bne.n	8002086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800207e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f90d 	bl	80022a0 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d10e      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d107      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f838 	bl	8002122 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d10e      	bne.n	80020de <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d107      	bne.n	80020de <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0220 	mvn.w	r2, #32
 80020d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8cd 	bl	8002278 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a42      	ldr	r2, [pc, #264]	; (8002258 <TIM_Base_SetConfig+0x120>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <TIM_Base_SetConfig+0x44>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d00f      	beq.n	800217c <TIM_Base_SetConfig+0x44>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3f      	ldr	r2, [pc, #252]	; (800225c <TIM_Base_SetConfig+0x124>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00b      	beq.n	800217c <TIM_Base_SetConfig+0x44>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3e      	ldr	r2, [pc, #248]	; (8002260 <TIM_Base_SetConfig+0x128>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <TIM_Base_SetConfig+0x44>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3d      	ldr	r2, [pc, #244]	; (8002264 <TIM_Base_SetConfig+0x12c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0x44>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3c      	ldr	r2, [pc, #240]	; (8002268 <TIM_Base_SetConfig+0x130>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d108      	bne.n	800218e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <TIM_Base_SetConfig+0x120>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d01b      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2e      	ldr	r2, [pc, #184]	; (800225c <TIM_Base_SetConfig+0x124>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d017      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2d      	ldr	r2, [pc, #180]	; (8002260 <TIM_Base_SetConfig+0x128>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2c      	ldr	r2, [pc, #176]	; (8002264 <TIM_Base_SetConfig+0x12c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00f      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2c      	ldr	r2, [pc, #176]	; (800226c <TIM_Base_SetConfig+0x134>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <TIM_Base_SetConfig+0x138>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <TIM_Base_SetConfig+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x9e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0x130>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <TIM_Base_SetConfig+0x120>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <TIM_Base_SetConfig+0x104>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <TIM_Base_SetConfig+0x12c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00f      	beq.n	800223c <TIM_Base_SetConfig+0x104>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <TIM_Base_SetConfig+0x134>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00b      	beq.n	800223c <TIM_Base_SetConfig+0x104>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <TIM_Base_SetConfig+0x138>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <TIM_Base_SetConfig+0x104>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a11      	ldr	r2, [pc, #68]	; (8002274 <TIM_Base_SetConfig+0x13c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0x104>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <TIM_Base_SetConfig+0x130>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40013400 	.word	0x40013400
 8002268:	40015000 	.word	0x40015000
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800

08002278 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e043      	b.n	800234e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f001 fdf8 	bl	8003ed0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f82d 	bl	8002358 <UART_SetConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e022      	b.n	800234e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa1f 	bl	8002754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002324:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002334:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 faa6 	bl	8002898 <UART_CheckIdleState>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002364:	2310      	movs	r3, #16
 8002366:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002368:	2300      	movs	r3, #0
 800236a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800236c:	2300      	movs	r3, #0
 800236e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4ba7      	ldr	r3, [pc, #668]	; (8002630 <UART_SetConfig+0x2d8>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	430b      	orrs	r3, r1
 800239e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a96      	ldr	r2, [pc, #600]	; (8002634 <UART_SetConfig+0x2dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d121      	bne.n	8002424 <UART_SetConfig+0xcc>
 80023e0:	4b95      	ldr	r3, [pc, #596]	; (8002638 <UART_SetConfig+0x2e0>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d817      	bhi.n	800241c <UART_SetConfig+0xc4>
 80023ec:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <UART_SetConfig+0x9c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002411 	.word	0x08002411
 80023fc:	08002417 	.word	0x08002417
 8002400:	0800240b 	.word	0x0800240b
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
 8002408:	e0b2      	b.n	8002570 <UART_SetConfig+0x218>
 800240a:	2302      	movs	r3, #2
 800240c:	75fb      	strb	r3, [r7, #23]
 800240e:	e0af      	b.n	8002570 <UART_SetConfig+0x218>
 8002410:	2304      	movs	r3, #4
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	e0ac      	b.n	8002570 <UART_SetConfig+0x218>
 8002416:	2308      	movs	r3, #8
 8002418:	75fb      	strb	r3, [r7, #23]
 800241a:	e0a9      	b.n	8002570 <UART_SetConfig+0x218>
 800241c:	2310      	movs	r3, #16
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	bf00      	nop
 8002422:	e0a5      	b.n	8002570 <UART_SetConfig+0x218>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a84      	ldr	r2, [pc, #528]	; (800263c <UART_SetConfig+0x2e4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d123      	bne.n	8002476 <UART_SetConfig+0x11e>
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <UART_SetConfig+0x2e0>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d012      	beq.n	8002462 <UART_SetConfig+0x10a>
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d802      	bhi.n	8002448 <UART_SetConfig+0xf0>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <UART_SetConfig+0xfe>
 8002446:	e012      	b.n	800246e <UART_SetConfig+0x116>
 8002448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800244c:	d00c      	beq.n	8002468 <UART_SetConfig+0x110>
 800244e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002452:	d003      	beq.n	800245c <UART_SetConfig+0x104>
 8002454:	e00b      	b.n	800246e <UART_SetConfig+0x116>
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	e089      	b.n	8002570 <UART_SetConfig+0x218>
 800245c:	2302      	movs	r3, #2
 800245e:	75fb      	strb	r3, [r7, #23]
 8002460:	e086      	b.n	8002570 <UART_SetConfig+0x218>
 8002462:	2304      	movs	r3, #4
 8002464:	75fb      	strb	r3, [r7, #23]
 8002466:	e083      	b.n	8002570 <UART_SetConfig+0x218>
 8002468:	2308      	movs	r3, #8
 800246a:	75fb      	strb	r3, [r7, #23]
 800246c:	e080      	b.n	8002570 <UART_SetConfig+0x218>
 800246e:	2310      	movs	r3, #16
 8002470:	75fb      	strb	r3, [r7, #23]
 8002472:	bf00      	nop
 8002474:	e07c      	b.n	8002570 <UART_SetConfig+0x218>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <UART_SetConfig+0x2e8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d123      	bne.n	80024c8 <UART_SetConfig+0x170>
 8002480:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <UART_SetConfig+0x2e0>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800248c:	d012      	beq.n	80024b4 <UART_SetConfig+0x15c>
 800248e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002492:	d802      	bhi.n	800249a <UART_SetConfig+0x142>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <UART_SetConfig+0x150>
 8002498:	e012      	b.n	80024c0 <UART_SetConfig+0x168>
 800249a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800249e:	d00c      	beq.n	80024ba <UART_SetConfig+0x162>
 80024a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024a4:	d003      	beq.n	80024ae <UART_SetConfig+0x156>
 80024a6:	e00b      	b.n	80024c0 <UART_SetConfig+0x168>
 80024a8:	2300      	movs	r3, #0
 80024aa:	75fb      	strb	r3, [r7, #23]
 80024ac:	e060      	b.n	8002570 <UART_SetConfig+0x218>
 80024ae:	2302      	movs	r3, #2
 80024b0:	75fb      	strb	r3, [r7, #23]
 80024b2:	e05d      	b.n	8002570 <UART_SetConfig+0x218>
 80024b4:	2304      	movs	r3, #4
 80024b6:	75fb      	strb	r3, [r7, #23]
 80024b8:	e05a      	b.n	8002570 <UART_SetConfig+0x218>
 80024ba:	2308      	movs	r3, #8
 80024bc:	75fb      	strb	r3, [r7, #23]
 80024be:	e057      	b.n	8002570 <UART_SetConfig+0x218>
 80024c0:	2310      	movs	r3, #16
 80024c2:	75fb      	strb	r3, [r7, #23]
 80024c4:	bf00      	nop
 80024c6:	e053      	b.n	8002570 <UART_SetConfig+0x218>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <UART_SetConfig+0x2ec>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d123      	bne.n	800251a <UART_SetConfig+0x1c2>
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <UART_SetConfig+0x2e0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024de:	d012      	beq.n	8002506 <UART_SetConfig+0x1ae>
 80024e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e4:	d802      	bhi.n	80024ec <UART_SetConfig+0x194>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d007      	beq.n	80024fa <UART_SetConfig+0x1a2>
 80024ea:	e012      	b.n	8002512 <UART_SetConfig+0x1ba>
 80024ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f0:	d00c      	beq.n	800250c <UART_SetConfig+0x1b4>
 80024f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024f6:	d003      	beq.n	8002500 <UART_SetConfig+0x1a8>
 80024f8:	e00b      	b.n	8002512 <UART_SetConfig+0x1ba>
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
 80024fe:	e037      	b.n	8002570 <UART_SetConfig+0x218>
 8002500:	2302      	movs	r3, #2
 8002502:	75fb      	strb	r3, [r7, #23]
 8002504:	e034      	b.n	8002570 <UART_SetConfig+0x218>
 8002506:	2304      	movs	r3, #4
 8002508:	75fb      	strb	r3, [r7, #23]
 800250a:	e031      	b.n	8002570 <UART_SetConfig+0x218>
 800250c:	2308      	movs	r3, #8
 800250e:	75fb      	strb	r3, [r7, #23]
 8002510:	e02e      	b.n	8002570 <UART_SetConfig+0x218>
 8002512:	2310      	movs	r3, #16
 8002514:	75fb      	strb	r3, [r7, #23]
 8002516:	bf00      	nop
 8002518:	e02a      	b.n	8002570 <UART_SetConfig+0x218>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <UART_SetConfig+0x2f0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d123      	bne.n	800256c <UART_SetConfig+0x214>
 8002524:	4b44      	ldr	r3, [pc, #272]	; (8002638 <UART_SetConfig+0x2e0>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800252c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002530:	d012      	beq.n	8002558 <UART_SetConfig+0x200>
 8002532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002536:	d802      	bhi.n	800253e <UART_SetConfig+0x1e6>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <UART_SetConfig+0x1f4>
 800253c:	e012      	b.n	8002564 <UART_SetConfig+0x20c>
 800253e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002542:	d00c      	beq.n	800255e <UART_SetConfig+0x206>
 8002544:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002548:	d003      	beq.n	8002552 <UART_SetConfig+0x1fa>
 800254a:	e00b      	b.n	8002564 <UART_SetConfig+0x20c>
 800254c:	2300      	movs	r3, #0
 800254e:	75fb      	strb	r3, [r7, #23]
 8002550:	e00e      	b.n	8002570 <UART_SetConfig+0x218>
 8002552:	2302      	movs	r3, #2
 8002554:	75fb      	strb	r3, [r7, #23]
 8002556:	e00b      	b.n	8002570 <UART_SetConfig+0x218>
 8002558:	2304      	movs	r3, #4
 800255a:	75fb      	strb	r3, [r7, #23]
 800255c:	e008      	b.n	8002570 <UART_SetConfig+0x218>
 800255e:	2308      	movs	r3, #8
 8002560:	75fb      	strb	r3, [r7, #23]
 8002562:	e005      	b.n	8002570 <UART_SetConfig+0x218>
 8002564:	2310      	movs	r3, #16
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	bf00      	nop
 800256a:	e001      	b.n	8002570 <UART_SetConfig+0x218>
 800256c:	2310      	movs	r3, #16
 800256e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002578:	d17d      	bne.n	8002676 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d865      	bhi.n	800264c <UART_SetConfig+0x2f4>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <UART_SetConfig+0x230>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025ad 	.word	0x080025ad
 800258c:	080025c9 	.word	0x080025c9
 8002590:	080025e5 	.word	0x080025e5
 8002594:	0800264d 	.word	0x0800264d
 8002598:	080025ff 	.word	0x080025ff
 800259c:	0800264d 	.word	0x0800264d
 80025a0:	0800264d 	.word	0x0800264d
 80025a4:	0800264d 	.word	0x0800264d
 80025a8:	0800261b 	.word	0x0800261b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025ac:	f7ff f99a 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80025b0:	4603      	mov	r3, r0
 80025b2:	005a      	lsls	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	441a      	add	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	82bb      	strh	r3, [r7, #20]
        break;
 80025c6:	e044      	b.n	8002652 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025c8:	f7ff f9ae 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 80025cc:	4603      	mov	r3, r0
 80025ce:	005a      	lsls	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	441a      	add	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	82bb      	strh	r3, [r7, #20]
        break;
 80025e2:	e036      	b.n	8002652 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80025ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6852      	ldr	r2, [r2, #4]
 80025f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025fa:	82bb      	strh	r3, [r7, #20]
        break;
 80025fc:	e029      	b.n	8002652 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025fe:	f7ff f8fb 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 8002602:	4603      	mov	r3, r0
 8002604:	005a      	lsls	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	82bb      	strh	r3, [r7, #20]
        break;
 8002618:	e01b      	b.n	8002652 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	82bb      	strh	r3, [r7, #20]
        break;
 800262e:	e010      	b.n	8002652 <UART_SetConfig+0x2fa>
 8002630:	efff69f3 	.word	0xefff69f3
 8002634:	40013800 	.word	0x40013800
 8002638:	40021000 	.word	0x40021000
 800263c:	40004400 	.word	0x40004400
 8002640:	40004800 	.word	0x40004800
 8002644:	40004c00 	.word	0x40004c00
 8002648:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	74fb      	strb	r3, [r7, #19]
        break;
 8002650:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002652:	8abb      	ldrh	r3, [r7, #20]
 8002654:	f023 030f 	bic.w	r3, r3, #15
 8002658:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800265a:	8abb      	ldrh	r3, [r7, #20]
 800265c:	105b      	asrs	r3, r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b29a      	uxth	r2, r3
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	4313      	orrs	r3, r2
 800266a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	897a      	ldrh	r2, [r7, #10]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	e069      	b.n	800274a <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d863      	bhi.n	8002744 <UART_SetConfig+0x3ec>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <UART_SetConfig+0x32c>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026c9 	.word	0x080026c9
 800268c:	080026e9 	.word	0x080026e9
 8002690:	08002745 	.word	0x08002745
 8002694:	08002709 	.word	0x08002709
 8002698:	08002745 	.word	0x08002745
 800269c:	08002745 	.word	0x08002745
 80026a0:	08002745 	.word	0x08002745
 80026a4:	08002729 	.word	0x08002729
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026a8:	f7ff f91c 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
        break;
 80026c6:	e040      	b.n	800274a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026c8:	f7ff f92e 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60da      	str	r2, [r3, #12]
        break;
 80026e6:	e030      	b.n	800274a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80026f2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6852      	ldr	r2, [r2, #4]
 80026fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
        break;
 8002706:	e020      	b.n	800274a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002708:	f7ff f876 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
        break;
 8002726:	e010      	b.n	800274a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
        break;
 8002742:	e002      	b.n	800274a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	74fb      	strb	r3, [r7, #19]
        break;
 8002748:	bf00      	nop
    }
  }

  return ret;
 800274a:	7cfb      	ldrb	r3, [r7, #19]

}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01a      	beq.n	800286a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002852:	d10a      	bne.n	800286a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028aa:	f7fd fcc3 	bl	8000234 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d10e      	bne.n	80028dc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f82c 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e022      	b.n	8002922 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d10e      	bne.n	8002908 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f816 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e00c      	b.n	8002922 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293a:	e02c      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d028      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <UART_WaitOnFlagUntilTimeout+0x30>
 800294a:	f7fd fc73 	bl	8000234 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	429a      	cmp	r2, r3
 8002958:	d21d      	bcs.n	8002996 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002968:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e00f      	b.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0c3      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d0:	2b84      	cmp	r3, #132	; 0x84
 80029d2:	d005      	beq.n	80029e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	3303      	adds	r3, #3
 80029de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029e0:	68fb      	ldr	r3, [r7, #12]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029f2:	f000 fa4f 	bl	8002e94 <vTaskStartScheduler>
  
  return osOK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}

080029fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685c      	ldr	r4, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a12:	b29e      	uxth	r6, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ffcf 	bl	80029be <makeFreeRtosPriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	9200      	str	r2, [sp, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	4629      	mov	r1, r5
 8002a30:	4620      	mov	r0, r4
 8002a32:	f000 f8d2 	bl	8002bda <xTaskCreate>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002a40:	68fb      	ldr	r3, [r7, #12]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <osDelay+0x16>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	e000      	b.n	8002a62 <osDelay+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f9e2 	bl	8002e2c <vTaskDelay>
  
  return osOK;
 8002a68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 0208 	add.w	r2, r3, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0208 	add.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0208 	add.w	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d103      	bne.n	8002b34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e00c      	b.n	8002b4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3308      	adds	r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e002      	b.n	8002b42 <vListInsert+0x2e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d2f6      	bcs.n	8002b3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6892      	ldr	r2, [r2, #8]
 8002b9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6852      	ldr	r2, [r2, #4]
 8002ba6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d103      	bne.n	8002bba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b08c      	sub	sp, #48	; 0x30
 8002bde:	af04      	add	r7, sp, #16
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fe60 	bl	80038b4 <pvPortMalloc>
 8002bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002bfc:	2054      	movs	r0, #84	; 0x54
 8002bfe:	f000 fe59 	bl	80038b4 <pvPortMalloc>
 8002c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c10:	e005      	b.n	8002c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f000 ff10 	bl	8003a38 <vPortFree>
 8002c18:	e001      	b.n	8002c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f80e 	bl	8002c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c40:	69f8      	ldr	r0, [r7, #28]
 8002c42:	f000 f889 	bl	8002d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e002      	b.n	8002c52 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c52:	69bb      	ldr	r3, [r7, #24]
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	3b01      	subs	r3, #1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f023 0307 	bic.w	r3, r3, #7
 8002c82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e7fe      	b.n	8002ca0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e012      	b.n	8002cce <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	7819      	ldrb	r1, [r3, #0]
 8002cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3334      	adds	r3, #52	; 0x34
 8002cb8:	460a      	mov	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d9e9      	bls.n	8002ca8 <prvInitialiseNewTask+0x4c>
 8002cd4:	e000      	b.n	8002cd8 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002cd6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2b1f      	cmp	r3, #31
 8002ce4:	d901      	bls.n	8002cea <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fed6 	bl	8002ab2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	3318      	adds	r3, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fed1 	bl	8002ab2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	f1c3 0220 	rsb	r2, r3, #32
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2200      	movs	r2, #0
 8002d2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	69b8      	ldr	r0, [r7, #24]
 8002d3a:	f000 fbe1 	bl	8003500 <pxPortInitialiseStack>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d50:	bf00      	nop
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d60:	f000 fcd6 	bl	8003710 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <prvAddNewTaskToReadyList+0xb8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <prvAddNewTaskToReadyList+0xb8>)
 8002d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <prvAddNewTaskToReadyList+0xbc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <prvAddNewTaskToReadyList+0xbc>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <prvAddNewTaskToReadyList+0xb8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d110      	bne.n	8002da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d84:	f000 faa4 	bl	80032d0 <prvInitialiseTaskLists>
 8002d88:	e00d      	b.n	8002da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <prvAddNewTaskToReadyList+0xc0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <prvAddNewTaskToReadyList+0xbc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d802      	bhi.n	8002da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <prvAddNewTaskToReadyList+0xbc>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <prvAddNewTaskToReadyList+0xc4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <prvAddNewTaskToReadyList+0xc4>)
 8002dae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <prvAddNewTaskToReadyList+0xc8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <prvAddNewTaskToReadyList+0xc8>)
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <prvAddNewTaskToReadyList+0xcc>)
 8002dd0:	441a      	add	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7ff fe77 	bl	8002acc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dde:	f000 fcc5 	bl	800376c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <prvAddNewTaskToReadyList+0xc0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <prvAddNewTaskToReadyList+0xbc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <prvAddNewTaskToReadyList+0xd0>)
 8002dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000031c 	.word	0x2000031c
 8002e14:	20000028 	.word	0x20000028
 8002e18:	20000328 	.word	0x20000328
 8002e1c:	20000338 	.word	0x20000338
 8002e20:	20000324 	.word	0x20000324
 8002e24:	2000002c 	.word	0x2000002c
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <vTaskDelay+0x60>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <vTaskDelay+0x2e>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e7fe      	b.n	8002e58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002e5a:	f000 f861 	bl	8002f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e5e:	2100      	movs	r1, #0
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fae7 	bl	8003434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e66:	f000 f869 	bl	8002f3c <xTaskResumeAll>
 8002e6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d107      	bne.n	8002e82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <vTaskDelay+0x64>)
 8002e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000344 	.word	0x20000344
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <vTaskStartScheduler+0x74>)
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	4919      	ldr	r1, [pc, #100]	; (8002f0c <vTaskStartScheduler+0x78>)
 8002ea8:	4819      	ldr	r0, [pc, #100]	; (8002f10 <vTaskStartScheduler+0x7c>)
 8002eaa:	f7ff fe96 	bl	8002bda <xTaskCreate>
 8002eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <vTaskStartScheduler+0x4e>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <vTaskStartScheduler+0x80>)
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <vTaskStartScheduler+0x84>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <vTaskStartScheduler+0x88>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002edc:	f000 fb8c 	bl	80035f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ee0:	e00d      	b.n	8002efe <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d109      	bne.n	8002efe <vTaskStartScheduler+0x6a>
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	e7fe      	b.n	8002efc <vTaskStartScheduler+0x68>
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000340 	.word	0x20000340
 8002f0c:	080045b8 	.word	0x080045b8
 8002f10:	080032a1 	.word	0x080032a1
 8002f14:	2000033c 	.word	0x2000033c
 8002f18:	20000328 	.word	0x20000328
 8002f1c:	20000320 	.word	0x20000320

08002f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <vTaskSuspendAll+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <vTaskSuspendAll+0x18>)
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	20000344 	.word	0x20000344

08002f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <xTaskResumeAll+0x114>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <xTaskResumeAll+0x2a>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	e7fe      	b.n	8002f64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f66:	f000 fbd3 	bl	8003710 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <xTaskResumeAll+0x114>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	4a37      	ldr	r2, [pc, #220]	; (8003050 <xTaskResumeAll+0x114>)
 8002f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f74:	4b36      	ldr	r3, [pc, #216]	; (8003050 <xTaskResumeAll+0x114>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d161      	bne.n	8003040 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <xTaskResumeAll+0x118>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d05d      	beq.n	8003040 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f84:	e02e      	b.n	8002fe4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <xTaskResumeAll+0x11c>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3318      	adds	r3, #24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fdf7 	bl	8002b86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fdf2 	bl	8002b86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <xTaskResumeAll+0x120>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	; (800305c <xTaskResumeAll+0x120>)
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <xTaskResumeAll+0x124>)
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7ff fd7e 	bl	8002acc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <xTaskResumeAll+0x128>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <xTaskResumeAll+0x12c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <xTaskResumeAll+0x11c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1cc      	bne.n	8002f86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ff2:	f000 f9f9 	bl	80033e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <xTaskResumeAll+0x130>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003002:	f000 f837 	bl	8003074 <xTaskIncrementTick>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <xTaskResumeAll+0x12c>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3b01      	subs	r3, #1
 8003016:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f1      	bne.n	8003002 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <xTaskResumeAll+0x130>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <xTaskResumeAll+0x12c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <xTaskResumeAll+0x134>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003040:	f000 fb94 	bl	800376c <vPortExitCritical>

	return xAlreadyYielded;
 8003044:	68bb      	ldr	r3, [r7, #8]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000344 	.word	0x20000344
 8003054:	2000031c 	.word	0x2000031c
 8003058:	200002dc 	.word	0x200002dc
 800305c:	20000324 	.word	0x20000324
 8003060:	2000002c 	.word	0x2000002c
 8003064:	20000028 	.word	0x20000028
 8003068:	20000330 	.word	0x20000330
 800306c:	2000032c 	.word	0x2000032c
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307e:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <xTaskIncrementTick+0x14c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 808c 	bne.w	80031a0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003088:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <xTaskIncrementTick+0x150>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003090:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <xTaskIncrementTick+0x150>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11f      	bne.n	80030dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <xTaskIncrementTick+0x154>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <xTaskIncrementTick+0x46>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	e7fe      	b.n	80030b8 <xTaskIncrementTick+0x44>
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <xTaskIncrementTick+0x154>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <xTaskIncrementTick+0x158>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <xTaskIncrementTick+0x154>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4a40      	ldr	r2, [pc, #256]	; (80031cc <xTaskIncrementTick+0x158>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <xTaskIncrementTick+0x15c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a3e      	ldr	r2, [pc, #248]	; (80031d0 <xTaskIncrementTick+0x15c>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	f000 f986 	bl	80033e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <xTaskIncrementTick+0x160>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d34d      	bcc.n	8003182 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <xTaskIncrementTick+0x154>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <xTaskIncrementTick+0x80>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <xTaskIncrementTick+0x82>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <xTaskIncrementTick+0x160>)
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	601a      	str	r2, [r3, #0]
					break;
 8003102:	e03e      	b.n	8003182 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003104:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <xTaskIncrementTick+0x154>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d203      	bcs.n	8003124 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800311c:	4a2d      	ldr	r2, [pc, #180]	; (80031d4 <xTaskIncrementTick+0x160>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
						break;
 8003122:	e02e      	b.n	8003182 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd2c 	bl	8002b86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3318      	adds	r3, #24
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fd23 	bl	8002b86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <xTaskIncrementTick+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <xTaskIncrementTick+0x164>)
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <xTaskIncrementTick+0x168>)
 8003160:	441a      	add	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7ff fcaf 	bl	8002acc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <xTaskIncrementTick+0x16c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d3b4      	bcc.n	80030e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003180:	e7b1      	b.n	80030e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <xTaskIncrementTick+0x16c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4914      	ldr	r1, [pc, #80]	; (80031dc <xTaskIncrementTick+0x168>)
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d907      	bls.n	80031aa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800319a:	2301      	movs	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e004      	b.n	80031aa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <xTaskIncrementTick+0x170>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <xTaskIncrementTick+0x170>)
 80031a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <xTaskIncrementTick+0x174>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80031b6:	697b      	ldr	r3, [r7, #20]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000344 	.word	0x20000344
 80031c4:	20000320 	.word	0x20000320
 80031c8:	200002d4 	.word	0x200002d4
 80031cc:	200002d8 	.word	0x200002d8
 80031d0:	20000334 	.word	0x20000334
 80031d4:	2000033c 	.word	0x2000033c
 80031d8:	20000324 	.word	0x20000324
 80031dc:	2000002c 	.word	0x2000002c
 80031e0:	20000028 	.word	0x20000028
 80031e4:	2000032c 	.word	0x2000032c
 80031e8:	20000330 	.word	0x20000330

080031ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <vTaskSwitchContext+0xa0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <vTaskSwitchContext+0xa4>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003200:	e03e      	b.n	8003280 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <vTaskSwitchContext+0xa4>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <vTaskSwitchContext+0xa8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f1c3 031f 	rsb	r3, r3, #31
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	491e      	ldr	r1, [pc, #120]	; (8003298 <vTaskSwitchContext+0xac>)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	e7fe      	b.n	8003244 <vTaskSwitchContext+0x58>
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <vTaskSwitchContext+0xac>)
 8003252:	4413      	add	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3308      	adds	r3, #8
 8003268:	429a      	cmp	r2, r3
 800326a:	d104      	bne.n	8003276 <vTaskSwitchContext+0x8a>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <vTaskSwitchContext+0xb0>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000344 	.word	0x20000344
 8003290:	20000330 	.word	0x20000330
 8003294:	20000324 	.word	0x20000324
 8003298:	2000002c 	.word	0x2000002c
 800329c:	20000028 	.word	0x20000028

080032a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032a8:	f000 f852 	bl	8003350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <prvIdleTask+0x28>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d9f9      	bls.n	80032a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <prvIdleTask+0x2c>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032c4:	e7f0      	b.n	80032a8 <prvIdleTask+0x8>
 80032c6:	bf00      	nop
 80032c8:	2000002c 	.word	0x2000002c
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	e00c      	b.n	80032f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <prvInitialiseTaskLists+0x60>)
 80032e8:	4413      	add	r3, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fbc1 	bl	8002a72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3301      	adds	r3, #1
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b1f      	cmp	r3, #31
 80032fa:	d9ef      	bls.n	80032dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032fc:	480d      	ldr	r0, [pc, #52]	; (8003334 <prvInitialiseTaskLists+0x64>)
 80032fe:	f7ff fbb8 	bl	8002a72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003302:	480d      	ldr	r0, [pc, #52]	; (8003338 <prvInitialiseTaskLists+0x68>)
 8003304:	f7ff fbb5 	bl	8002a72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <prvInitialiseTaskLists+0x6c>)
 800330a:	f7ff fbb2 	bl	8002a72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800330e:	480c      	ldr	r0, [pc, #48]	; (8003340 <prvInitialiseTaskLists+0x70>)
 8003310:	f7ff fbaf 	bl	8002a72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <prvInitialiseTaskLists+0x74>)
 8003316:	f7ff fbac 	bl	8002a72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <prvInitialiseTaskLists+0x78>)
 800331c:	4a05      	ldr	r2, [pc, #20]	; (8003334 <prvInitialiseTaskLists+0x64>)
 800331e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <prvInitialiseTaskLists+0x7c>)
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <prvInitialiseTaskLists+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000002c 	.word	0x2000002c
 8003334:	200002ac 	.word	0x200002ac
 8003338:	200002c0 	.word	0x200002c0
 800333c:	200002dc 	.word	0x200002dc
 8003340:	200002f0 	.word	0x200002f0
 8003344:	20000308 	.word	0x20000308
 8003348:	200002d4 	.word	0x200002d4
 800334c:	200002d8 	.word	0x200002d8

08003350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003356:	e028      	b.n	80033aa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003358:	f7ff fde2 	bl	8002f20 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <prvCheckTasksWaitingTermination+0x6c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800336c:	f7ff fde6 	bl	8002f3c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d119      	bne.n	80033aa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003376:	f000 f9cb 	bl	8003710 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <prvCheckTasksWaitingTermination+0x6c>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fbfd 	bl	8002b86 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <prvCheckTasksWaitingTermination+0x70>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <prvCheckTasksWaitingTermination+0x70>)
 8003394:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <prvCheckTasksWaitingTermination+0x74>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <prvCheckTasksWaitingTermination+0x74>)
 800339e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80033a0:	f000 f9e4 	bl	800376c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f000 f80f 	bl	80033c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <prvCheckTasksWaitingTermination+0x74>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1d2      	bne.n	8003358 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200002f0 	.word	0x200002f0
 80033c0:	2000031c 	.word	0x2000031c
 80033c4:	20000304 	.word	0x20000304

080033c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fb2f 	bl	8003a38 <vPortFree>
			vPortFree( pxTCB );
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb2c 	bl	8003a38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <prvResetNextTaskUnblockTime+0x44>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <prvResetNextTaskUnblockTime+0x14>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <prvResetNextTaskUnblockTime+0x16>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <prvResetNextTaskUnblockTime+0x48>)
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800340a:	e008      	b.n	800341e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <prvResetNextTaskUnblockTime+0x44>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <prvResetNextTaskUnblockTime+0x48>)
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	200002d4 	.word	0x200002d4
 8003430:	2000033c 	.word	0x2000033c

08003434 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3304      	adds	r3, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fb9b 	bl	8002b86 <uxListRemove>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	2201      	movs	r2, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4013      	ands	r3, r2
 800346a:	4a20      	ldr	r2, [pc, #128]	; (80034ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800346c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d10a      	bne.n	800348c <prvAddCurrentTaskToDelayedList+0x58>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3304      	adds	r3, #4
 8003482:	4619      	mov	r1, r3
 8003484:	481a      	ldr	r0, [pc, #104]	; (80034f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003486:	f7ff fb21 	bl	8002acc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800348a:	e026      	b.n	80034da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d209      	bcs.n	80034b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7ff fb2f 	bl	8002b14 <vListInsert>
}
 80034b6:	e010      	b.n	80034da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7ff fb25 	bl	8002b14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d202      	bcs.n	80034da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034d4:	4a09      	ldr	r2, [pc, #36]	; (80034fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6013      	str	r3, [r2, #0]
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000320 	.word	0x20000320
 80034e8:	20000028 	.word	0x20000028
 80034ec:	20000324 	.word	0x20000324
 80034f0:	20000308 	.word	0x20000308
 80034f4:	200002d8 	.word	0x200002d8
 80034f8:	200002d4 	.word	0x200002d4
 80034fc:	2000033c 	.word	0x2000033c

08003500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3b04      	subs	r3, #4
 8003510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3b04      	subs	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b04      	subs	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <pxPortInitialiseStack+0x64>)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b14      	subs	r3, #20
 800353a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b04      	subs	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f06f 0202 	mvn.w	r2, #2
 800354e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3b20      	subs	r3, #32
 8003554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	08003569 	.word	0x08003569

08003568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <prvTaskExitError+0x38>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d009      	beq.n	800358c <prvTaskExitError+0x24>
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	e7fe      	b.n	800358a <prvTaskExitError+0x22>
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800359e:	e7fe      	b.n	800359e <prvTaskExitError+0x36>
 80035a0:	20000004 	.word	0x20000004
	...

080035b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <pxCurrentTCBConst2>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6808      	ldr	r0, [r1, #0]
 80035b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ba:	f380 8809 	msr	PSP, r0
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8811 	msr	BASEPRI, r0
 80035ca:	4770      	bx	lr
 80035cc:	f3af 8000 	nop.w

080035d0 <pxCurrentTCBConst2>:
 80035d0:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <prvPortStartFirstTask+0x1c>)
 80035da:	6800      	ldr	r0, [r0, #0]
 80035dc:	6800      	ldr	r0, [r0, #0]
 80035de:	f380 8808 	msr	MSP, r0
 80035e2:	b662      	cpsie	i
 80035e4:	b661      	cpsie	f
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	df00      	svc	0
 80035f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035f2:	bf00      	nop
 80035f4:	e000ed08 	.word	0xe000ed08

080035f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <xPortStartScheduler+0xf4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <xPortStartScheduler+0xf8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d109      	bne.n	800361c <xPortStartScheduler+0x24>
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e7fe      	b.n	800361a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <xPortStartScheduler+0xf4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <xPortStartScheduler+0xfc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d109      	bne.n	800363a <xPortStartScheduler+0x42>
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e7fe      	b.n	8003638 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <xPortStartScheduler+0x100>)
 800363c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <xPortStartScheduler+0x104>)
 8003660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003662:	4b27      	ldr	r3, [pc, #156]	; (8003700 <xPortStartScheduler+0x108>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003668:	e009      	b.n	800367e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800366a:	4b25      	ldr	r3, [pc, #148]	; (8003700 <xPortStartScheduler+0x108>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <xPortStartScheduler+0x108>)
 8003672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d0ef      	beq.n	800366a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <xPortStartScheduler+0x108>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <xPortStartScheduler+0x108>)
 8003692:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <xPortStartScheduler+0x108>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <xPortStartScheduler+0x108>)
 800369e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <xPortStartScheduler+0x10c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <xPortStartScheduler+0x10c>)
 80036ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <xPortStartScheduler+0x10c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a12      	ldr	r2, [pc, #72]	; (8003704 <xPortStartScheduler+0x10c>)
 80036ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036c0:	f000 f8d2 	bl	8003868 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <xPortStartScheduler+0x110>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036ca:	f000 f8e9 	bl	80038a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <xPortStartScheduler+0x114>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <xPortStartScheduler+0x114>)
 80036d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036da:	f7ff ff7d 	bl	80035d8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80036de:	f7ff ff43 	bl	8003568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e000ed00 	.word	0xe000ed00
 80036f0:	410fc271 	.word	0x410fc271
 80036f4:	410fc270 	.word	0x410fc270
 80036f8:	e000e400 	.word	0xe000e400
 80036fc:	20000348 	.word	0x20000348
 8003700:	2000034c 	.word	0x2000034c
 8003704:	e000ed20 	.word	0xe000ed20
 8003708:	20000004 	.word	0x20000004
 800370c:	e000ef34 	.word	0xe000ef34

08003710 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <vPortEnterCritical+0x54>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <vPortEnterCritical+0x54>)
 8003730:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <vPortEnterCritical+0x54>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10e      	bne.n	8003758 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <vPortEnterCritical+0x58>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <vPortEnterCritical+0x48>
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	e7fe      	b.n	8003756 <vPortEnterCritical+0x46>
	}
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000004 	.word	0x20000004
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <vPortExitCritical+0x4c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <vPortExitCritical+0x22>
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	e7fe      	b.n	800378c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <vPortExitCritical+0x4c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3b01      	subs	r3, #1
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <vPortExitCritical+0x4c>)
 8003796:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <vPortExitCritical+0x4c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <vPortExitCritical+0x3e>
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004
 80037bc:	00000000 	.word	0x00000000

080037c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037c0:	f3ef 8009 	mrs	r0, PSP
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <pxCurrentTCBConst>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f01e 0f10 	tst.w	lr, #16
 80037d0:	bf08      	it	eq
 80037d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80037e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037e4:	f380 8811 	msr	BASEPRI, r0
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f7ff fcfc 	bl	80031ec <vTaskSwitchContext>
 80037f4:	f04f 0000 	mov.w	r0, #0
 80037f8:	f380 8811 	msr	BASEPRI, r0
 80037fc:	bc08      	pop	{r3}
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	6808      	ldr	r0, [r1, #0]
 8003802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003806:	f01e 0f10 	tst.w	lr, #16
 800380a:	bf08      	it	eq
 800380c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003810:	f380 8809 	msr	PSP, r0
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	f3af 8000 	nop.w

08003820 <pxCurrentTCBConst>:
 8003820:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop

08003828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003840:	f7ff fc18 	bl	8003074 <xTaskIncrementTick>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <SysTick_Handler+0x3c>)
 800384c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <vPortSetupTimerInterrupt+0x28>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <vPortSetupTimerInterrupt+0x2c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <vPortSetupTimerInterrupt+0x30>)
 800387a:	3b01      	subs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <vPortSetupTimerInterrupt+0x34>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000008 	.word	0x20000008
 8003894:	10624dd3 	.word	0x10624dd3
 8003898:	e000e014 	.word	0xe000e014
 800389c:	e000e010 	.word	0xe000e010

080038a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038b0 <vPortEnableVFP+0x10>
 80038a4:	6801      	ldr	r1, [r0, #0]
 80038a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038aa:	6001      	str	r1, [r0, #0]
 80038ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038ae:	bf00      	nop
 80038b0:	e000ed88 	.word	0xe000ed88

080038b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038c0:	f7ff fb2e 	bl	8002f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038c4:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <pvPortMalloc+0x170>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038cc:	f000 f90c 	bl	8003ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038d0:	4b55      	ldr	r3, [pc, #340]	; (8003a28 <pvPortMalloc+0x174>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 808c 	bne.w	80039f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80038e4:	2208      	movs	r2, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f023 0307 	bic.w	r3, r3, #7
 80038fc:	3308      	adds	r3, #8
 80038fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <pvPortMalloc+0x6a>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e7fe      	b.n	800391c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d068      	beq.n	80039f6 <pvPortMalloc+0x142>
 8003924:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <pvPortMalloc+0x178>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d863      	bhi.n	80039f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800392e:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <pvPortMalloc+0x17c>)
 8003930:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <pvPortMalloc+0x17c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003938:	e004      	b.n	8003944 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d903      	bls.n	8003956 <pvPortMalloc+0xa2>
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f1      	bne.n	800393a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003956:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <pvPortMalloc+0x170>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	429a      	cmp	r2, r3
 800395e:	d04a      	beq.n	80039f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	4413      	add	r3, r2
 8003968:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	2308      	movs	r3, #8
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	429a      	cmp	r2, r3
 8003980:	d91e      	bls.n	80039c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <pvPortMalloc+0xf4>
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e7fe      	b.n	80039a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039ba:	69b8      	ldr	r0, [r7, #24]
 80039bc:	f000 f8f6 	bl	8003bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <pvPortMalloc+0x178>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <pvPortMalloc+0x178>)
 80039cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <pvPortMalloc+0x178>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <pvPortMalloc+0x180>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d203      	bcs.n	80039e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <pvPortMalloc+0x178>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <pvPortMalloc+0x180>)
 80039e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <pvPortMalloc+0x174>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039f6:	f7ff faa1 	bl	8002f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <pvPortMalloc+0x164>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e7fe      	b.n	8003a16 <pvPortMalloc+0x162>
	return pvReturn;
 8003a18:	69fb      	ldr	r3, [r7, #28]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000f58 	.word	0x20000f58
 8003a28:	20000f64 	.word	0x20000f64
 8003a2c:	20000f5c 	.word	0x20000f5c
 8003a30:	20000f50 	.word	0x20000f50
 8003a34:	20000f60 	.word	0x20000f60

08003a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d046      	beq.n	8003ad8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4413      	add	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <vPortFree+0xa8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <vPortFree+0x42>
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e7fe      	b.n	8003a78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <vPortFree+0x5e>
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	e7fe      	b.n	8003a94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <vPortFree+0xa8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d019      	beq.n	8003ad8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d115      	bne.n	8003ad8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <vPortFree+0xa8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003abc:	f7ff fa30 	bl	8002f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <vPortFree+0xac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <vPortFree+0xac>)
 8003acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ace:	6938      	ldr	r0, [r7, #16]
 8003ad0:	f000 f86c 	bl	8003bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ad4:	f7ff fa32 	bl	8002f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000f64 	.word	0x20000f64
 8003ae4:	20000f5c 	.word	0x20000f5c

08003ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <prvHeapInit+0xac>)
 8003af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3307      	adds	r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0307 	bic.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <prvHeapInit+0xac>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <prvHeapInit+0xb0>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <prvHeapInit+0xb0>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4413      	add	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b34:	2208      	movs	r2, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <prvHeapInit+0xb4>)
 8003b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <prvHeapInit+0xb4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <prvHeapInit+0xb4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <prvHeapInit+0xb4>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <prvHeapInit+0xb8>)
 8003b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <prvHeapInit+0xbc>)
 8003b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <prvHeapInit+0xc0>)
 8003b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	20000350 	.word	0x20000350
 8003b98:	20000f50 	.word	0x20000f50
 8003b9c:	20000f58 	.word	0x20000f58
 8003ba0:	20000f60 	.word	0x20000f60
 8003ba4:	20000f5c 	.word	0x20000f5c
 8003ba8:	20000f64 	.word	0x20000f64

08003bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <prvInsertBlockIntoFreeList+0xac>)
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <prvInsertBlockIntoFreeList+0x14>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d8f7      	bhi.n	8003bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d108      	bne.n	8003bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	441a      	add	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d118      	bne.n	8003c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <prvInsertBlockIntoFreeList+0xb0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d00d      	beq.n	8003c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e008      	b.n	8003c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <prvInsertBlockIntoFreeList+0xb0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e003      	b.n	8003c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d002      	beq.n	8003c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000f50 	.word	0x20000f50
 8003c5c:	20000f58 	.word	0x20000f58

08003c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c66:	f7fc fabb 	bl	80001e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c6a:	f000 f81b 	bl	8003ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c6e:	f000 f8a7 	bl	8003dc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003c72:	f000 f875 	bl	8003d60 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <main+0x3c>)
 8003c78:	1d3c      	adds	r4, r7, #4
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe feb7 	bl	80029fc <osThreadCreate>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <main+0x40>)
 8003c92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003c94:	f7fe feab 	bl	80029ee <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <main+0x38>
 8003c9a:	bf00      	nop
 8003c9c:	080045cc 	.word	0x080045cc
 8003ca0:	20000f6c 	.word	0x20000f6c

08003ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b0a6      	sub	sp, #152	; 0x98
 8003ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003caa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cae:	2228      	movs	r2, #40	; 0x28
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fc6c 	bl	8004590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2258      	movs	r2, #88	; 0x58
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fc5e 	bl	8004590 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cdc:	2310      	movs	r3, #16
 8003cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003cf0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003cf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fd0e 	bl	8000724 <HAL_RCC_OscConfig>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003d0e:	f000 f8b0 	bl	8003e72 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d12:	230f      	movs	r3, #15
 8003d14:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d16:	2302      	movs	r3, #2
 8003d18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d24:	2300      	movs	r3, #0
 8003d26:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fbe6 	bl	8001500 <HAL_RCC_ClockConfig>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003d3a:	f000 f89a 	bl	8003e72 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fe41 	bl	80019d0 <HAL_RCCEx_PeriphCLKConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003d54:	f000 f88d 	bl	8003e72 <Error_Handler>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3798      	adds	r7, #152	; 0x98
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <MX_USART1_UART_Init+0x5c>)
 8003d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d6c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d86:	220c      	movs	r2, #12
 8003d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003da2:	4805      	ldr	r0, [pc, #20]	; (8003db8 <MX_USART1_UART_Init+0x58>)
 8003da4:	f7fe fa86 	bl	80022b4 <HAL_UART_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003dae:	f000 f860 	bl	8003e72 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000f70 	.word	0x20000f70
 8003dbc:	40013800 	.word	0x40013800

08003dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dd0:	6153      	str	r3, [r2, #20]
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de8:	6153      	str	r3, [r2, #20]
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	6153      	str	r3, [r2, #20]
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e18:	6153      	str	r3, [r2, #20]
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <MX_GPIO_Init+0x74>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]

}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e44:	f7fe fe01 	bl	8002a4a <osDelay>
    printf("Hello");
 8003e48:	4801      	ldr	r0, [pc, #4]	; (8003e50 <StartDefaultTask+0x18>)
 8003e4a:	f000 fb05 	bl	8004458 <printf>
    osDelay(1000);
 8003e4e:	e7f7      	b.n	8003e40 <StartDefaultTask+0x8>
 8003e50:	080045e0 	.word	0x080045e0

08003e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e66:	f7fc f9d1 	bl	800020c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_MspInit+0x4c>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_MspInit+0x4c>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6193      	str	r3, [r2, #24]
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_MspInit+0x4c>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_MspInit+0x4c>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_MspInit+0x4c>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	61d3      	str	r3, [r2, #28]
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_MspInit+0x4c>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	210f      	movs	r1, #15
 8003eba:	f06f 0001 	mvn.w	r0, #1
 8003ebe:	f7fc fa79 	bl	80003b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <HAL_UART_MspInit+0x7c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d127      	bne.n	8003f42 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efc:	6193      	str	r3, [r2, #24]
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f14:	6153      	str	r3, [r2, #20]
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_UART_MspInit+0x80>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f22:	2330      	movs	r3, #48	; 0x30
 8003f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f32:	2307      	movs	r3, #7
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4805      	ldr	r0, [pc, #20]	; (8003f54 <HAL_UART_MspInit+0x84>)
 8003f3e:	f7fc fa63 	bl	8000408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f42:	bf00      	nop
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	48000800 	.word	0x48000800

08003f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	201c      	movs	r0, #28
 8003f6e:	f7fc fa21 	bl	80003b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8003f72:	201c      	movs	r0, #28
 8003f74:	f7fc fa3a 	bl	80003ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_InitTick+0xa4>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_InitTick+0xa4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	61d3      	str	r3, [r2, #28]
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_InitTick+0xa4>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f90:	f107 0210 	add.w	r2, r7, #16
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fce6 	bl	800196c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fd fca0 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	4a14      	ldr	r2, [pc, #80]	; (8004000 <HAL_InitTick+0xa8>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0c9b      	lsrs	r3, r3, #18
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_InitTick+0xac>)
 8003fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_InitTick+0xac>)
 8003fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <HAL_InitTick+0xac>)
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_InitTick+0xac>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_InitTick+0xac>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003fda:	480a      	ldr	r0, [pc, #40]	; (8004004 <HAL_InitTick+0xac>)
 8003fdc:	f7fd ff14 	bl	8001e08 <HAL_TIM_Base_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <HAL_InitTick+0xac>)
 8003fe8:	f7fd ff43 	bl	8001e72 <HAL_TIM_Base_Start_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	e000      	b.n	8003ff2 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3730      	adds	r7, #48	; 0x30
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	431bde83 	.word	0x431bde83
 8004004:	20000fe0 	.word	0x20000fe0

08004008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800401a:	e7fe      	b.n	800401a <HardFault_Handler+0x4>

0800401c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004020:	e7fe      	b.n	8004020 <MemManage_Handler+0x4>

08004022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004026:	e7fe      	b.n	8004026 <BusFault_Handler+0x4>

08004028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800402c:	e7fe      	b.n	800402c <UsageFault_Handler+0x4>

0800402e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <TIM2_IRQHandler+0x10>)
 8004042:	f7fd ff31 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000fe0 	.word	0x20000fe0

08004050 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004058:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800405c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004068:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800406c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004070:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004078:	e000      	b.n	800407c <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 800407a:	bf00      	nop
 800407c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f9      	beq.n	800407a <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004086:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004090:	687b      	ldr	r3, [r7, #4]
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e009      	b.n	80040c4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	60ba      	str	r2, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ffc9 	bl	8004050 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3301      	adds	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	dbf1      	blt.n	80040b0 <_write+0x12>
	}
	return len;
 80040cc:	687b      	ldr	r3, [r7, #4]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <SystemInit+0x84>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	4a1e      	ldr	r2, [pc, #120]	; (800415c <SystemInit+0x84>)
 80040e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <SystemInit+0x88>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <SystemInit+0x88>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <SystemInit+0x88>)
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4918      	ldr	r1, [pc, #96]	; (8004160 <SystemInit+0x88>)
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <SystemInit+0x8c>)
 8004100:	4013      	ands	r3, r2
 8004102:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <SystemInit+0x88>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a15      	ldr	r2, [pc, #84]	; (8004160 <SystemInit+0x88>)
 800410a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <SystemInit+0x88>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a11      	ldr	r2, [pc, #68]	; (8004160 <SystemInit+0x88>)
 800411a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <SystemInit+0x88>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <SystemInit+0x88>)
 8004126:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800412a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <SystemInit+0x88>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <SystemInit+0x88>)
 8004132:	f023 030f 	bic.w	r3, r3, #15
 8004136:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <SystemInit+0x88>)
 800413a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413c:	4908      	ldr	r1, [pc, #32]	; (8004160 <SystemInit+0x88>)
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <SystemInit+0x90>)
 8004140:	4013      	ands	r3, r2
 8004142:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <SystemInit+0x88>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <SystemInit+0x84>)
 800414c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004150:	609a      	str	r2, [r3, #8]
#endif
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00
 8004160:	40021000 	.word	0x40021000
 8004164:	f87fc00c 	.word	0xf87fc00c
 8004168:	ff00fccc 	.word	0xff00fccc

0800416c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800417c:	e004      	b.n	8004188 <ts_itoa+0x1c>
		div *= base;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d2f3      	bcs.n	800417e <ts_itoa+0x12>

	while (div != 0)
 8004196:	e029      	b.n	80041ec <ts_itoa+0x80>
	{
		int num = d/div;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80041aa:	fb02 f201 	mul.w	r2, r2, r1
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80041ba:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b09      	cmp	r3, #9
 80041c0:	dd0a      	ble.n	80041d8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c58      	adds	r0, r3, #1
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	6008      	str	r0, [r1, #0]
 80041d0:	3237      	adds	r2, #55	; 0x37
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e009      	b.n	80041ec <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c58      	adds	r0, r3, #1
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	6008      	str	r0, [r1, #0]
 80041e6:	3230      	adds	r2, #48	; 0x30
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1d2      	bne.n	8004198 <ts_itoa+0x2c>
	}
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800420e:	e07d      	b.n	800430c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b25      	cmp	r3, #37	; 0x25
 8004216:	d171      	bne.n	80042fc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d01e      	beq.n	8004264 <ts_formatstring+0x66>
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	dc06      	bgt.n	8004238 <ts_formatstring+0x3a>
 800422a:	2b58      	cmp	r3, #88	; 0x58
 800422c:	d050      	beq.n	80042d0 <ts_formatstring+0xd2>
 800422e:	2b63      	cmp	r3, #99	; 0x63
 8004230:	d00e      	beq.n	8004250 <ts_formatstring+0x52>
 8004232:	2b25      	cmp	r3, #37	; 0x25
 8004234:	d058      	beq.n	80042e8 <ts_formatstring+0xea>
 8004236:	e05d      	b.n	80042f4 <ts_formatstring+0xf6>
 8004238:	2b73      	cmp	r3, #115	; 0x73
 800423a:	d02b      	beq.n	8004294 <ts_formatstring+0x96>
 800423c:	2b73      	cmp	r3, #115	; 0x73
 800423e:	dc02      	bgt.n	8004246 <ts_formatstring+0x48>
 8004240:	2b69      	cmp	r3, #105	; 0x69
 8004242:	d00f      	beq.n	8004264 <ts_formatstring+0x66>
 8004244:	e056      	b.n	80042f4 <ts_formatstring+0xf6>
 8004246:	2b75      	cmp	r3, #117	; 0x75
 8004248:	d037      	beq.n	80042ba <ts_formatstring+0xbc>
 800424a:	2b78      	cmp	r3, #120	; 0x78
 800424c:	d040      	beq.n	80042d0 <ts_formatstring+0xd2>
 800424e:	e051      	b.n	80042f4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	60fa      	str	r2, [r7, #12]
 800425e:	b2ca      	uxtb	r2, r1
 8004260:	701a      	strb	r2, [r3, #0]
				break;
 8004262:	e047      	b.n	80042f4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da07      	bge.n	8004284 <ts_formatstring+0x86>
					{
						val *= -1;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	425b      	negs	r3, r3
 8004278:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	60fa      	str	r2, [r7, #12]
 8004280:	222d      	movs	r2, #45	; 0x2d
 8004282:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	220a      	movs	r2, #10
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff6d 	bl	800416c <ts_itoa>
				}
				break;
 8004292:	e02f      	b.n	80042f4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800429e:	e007      	b.n	80042b0 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	1c53      	adds	r3, r2, #1
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	60f9      	str	r1, [r7, #12]
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f3      	bne.n	80042a0 <ts_formatstring+0xa2>
					}
				}
				break;
 80042b8:	e01c      	b.n	80042f4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	f107 030c 	add.w	r3, r7, #12
 80042c6:	220a      	movs	r2, #10
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff4f 	bl	800416c <ts_itoa>
				break;
 80042ce:	e011      	b.n	80042f4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	2210      	movs	r2, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff43 	bl	800416c <ts_itoa>
				break;
 80042e6:	e005      	b.n	80042f4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	60fa      	str	r2, [r7, #12]
 80042ee:	2225      	movs	r2, #37	; 0x25
 80042f0:	701a      	strb	r2, [r3, #0]
				  break;
 80042f2:	bf00      	nop
			}
			fmt++;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	e007      	b.n	800430c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	1c53      	adds	r3, r2, #1
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1c59      	adds	r1, r3, #1
 8004306:	60f9      	str	r1, [r7, #12]
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f af7d 	bne.w	8004210 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1ad3      	subs	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800433a:	e081      	b.n	8004440 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b25      	cmp	r3, #37	; 0x25
 8004342:	d177      	bne.n	8004434 <ts_formatlength+0x108>
		{
			++fmt;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3301      	adds	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	3b58      	subs	r3, #88	; 0x58
 8004350:	2b20      	cmp	r3, #32
 8004352:	d86a      	bhi.n	800442a <ts_formatlength+0xfe>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <ts_formatlength+0x30>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800441d 	.word	0x0800441d
 8004360:	0800442b 	.word	0x0800442b
 8004364:	0800442b 	.word	0x0800442b
 8004368:	0800442b 	.word	0x0800442b
 800436c:	0800442b 	.word	0x0800442b
 8004370:	0800442b 	.word	0x0800442b
 8004374:	0800442b 	.word	0x0800442b
 8004378:	0800442b 	.word	0x0800442b
 800437c:	0800442b 	.word	0x0800442b
 8004380:	0800442b 	.word	0x0800442b
 8004384:	0800442b 	.word	0x0800442b
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043ef 	.word	0x080043ef
 8004390:	0800442b 	.word	0x0800442b
 8004394:	0800442b 	.word	0x0800442b
 8004398:	0800442b 	.word	0x0800442b
 800439c:	0800442b 	.word	0x0800442b
 80043a0:	080043ef 	.word	0x080043ef
 80043a4:	0800442b 	.word	0x0800442b
 80043a8:	0800442b 	.word	0x0800442b
 80043ac:	0800442b 	.word	0x0800442b
 80043b0:	0800442b 	.word	0x0800442b
 80043b4:	0800442b 	.word	0x0800442b
 80043b8:	0800442b 	.word	0x0800442b
 80043bc:	0800442b 	.word	0x0800442b
 80043c0:	0800442b 	.word	0x0800442b
 80043c4:	0800442b 	.word	0x0800442b
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	0800442b 	.word	0x0800442b
 80043d0:	080043ef 	.word	0x080043ef
 80043d4:	0800442b 	.word	0x0800442b
 80043d8:	0800442b 	.word	0x0800442b
 80043dc:	0800441d 	.word	0x0800441d
			{
			  case 'c':
		  		  va_arg(va, int);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3304      	adds	r3, #4
 80043e4:	603b      	str	r3, [r7, #0]
				  ++length;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
				  break;
 80043ec:	e025      	b.n	800443a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	330b      	adds	r3, #11
 80043f2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	603b      	str	r3, [r7, #0]
				  break;
 80043fa:	e01e      	b.n	800443a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1d1a      	adds	r2, r3, #4
 8004400:	603a      	str	r2, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004406:	e002      	b.n	800440e <ts_formatlength+0xe2>
			  			  ++length;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	60ba      	str	r2, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f6      	bne.n	8004408 <ts_formatlength+0xdc>
			  	  }
				  break;
 800441a:	e00e      	b.n	800443a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3308      	adds	r3, #8
 8004420:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	603b      	str	r3, [r7, #0]
				  break;
 8004428:	e007      	b.n	800443a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
				  break;
 8004430:	bf00      	nop
 8004432:	e002      	b.n	800443a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3301      	adds	r3, #1
 800443e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af79 	bne.w	800433c <ts_formatlength+0x10>
	}
	return length;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8004458:	b40f      	push	{r0, r1, r2, r3}
 800445a:	b5b0      	push	{r4, r5, r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
	int length = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004468:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	6a38      	ldr	r0, [r7, #32]
 800446e:	f7ff ff5d 	bl	800432c <ts_formatlength>
 8004472:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004474:	466b      	mov	r3, sp
 8004476:	461d      	mov	r5, r3
		char buf[length];
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	1e43      	subs	r3, r0, #1
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	4603      	mov	r3, r0
 8004480:	4619      	mov	r1, r3
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f04f 0400 	mov.w	r4, #0
 800448e:	00d4      	lsls	r4, r2, #3
 8004490:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004494:	00cb      	lsls	r3, r1, #3
 8004496:	4603      	mov	r3, r0
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	00d4      	lsls	r4, r2, #3
 80044a8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80044ac:	00cb      	lsls	r3, r1, #3
 80044ae:	4603      	mov	r3, r0
 80044b0:	3307      	adds	r3, #7
 80044b2:	08db      	lsrs	r3, r3, #3
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	ebad 0d03 	sub.w	sp, sp, r3
 80044ba:	466b      	mov	r3, sp
 80044bc:	3300      	adds	r3, #0
 80044be:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80044c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c4:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	6a39      	ldr	r1, [r7, #32]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe96 	bl	80041fe <ts_formatstring>
 80044d2:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4619      	mov	r1, r3
 80044da:	2001      	movs	r0, #1
 80044dc:	f7ff fddf 	bl	800409e <_write>
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80044f0:	b004      	add	sp, #16
 80044f2:	4770      	bx	lr

080044f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800452c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80044f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80044fa:	e003      	b.n	8004504 <LoopCopyDataInit>

080044fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80044fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004500:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004502:	3104      	adds	r1, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004508:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800450a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800450c:	d3f6      	bcc.n	80044fc <CopyDataInit>
	ldr	r2, =_sbss
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004510:	e002      	b.n	8004518 <LoopFillZerobss>

08004512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004512:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004514:	f842 3b04 	str.w	r3, [r2], #4

08004518 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <LoopForever+0x16>)
	cmp	r2, r3
 800451a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800451c:	d3f9      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800451e:	f7ff fddb 	bl	80040d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004522:	f000 f811 	bl	8004548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004526:	f7ff fb9b 	bl	8003c60 <main>

0800452a <LoopForever>:

LoopForever:
    b LoopForever
 800452a:	e7fe      	b.n	800452a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800452c:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8004530:	08004628 	.word	0x08004628
	ldr	r0, =_sdata
 8004534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004538:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800453c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004540:	20001020 	.word	0x20001020

08004544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004544:	e7fe      	b.n	8004544 <ADC1_2_IRQHandler>
	...

08004548 <__libc_init_array>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4e0d      	ldr	r6, [pc, #52]	; (8004580 <__libc_init_array+0x38>)
 800454c:	4c0d      	ldr	r4, [pc, #52]	; (8004584 <__libc_init_array+0x3c>)
 800454e:	1ba4      	subs	r4, r4, r6
 8004550:	10a4      	asrs	r4, r4, #2
 8004552:	2500      	movs	r5, #0
 8004554:	42a5      	cmp	r5, r4
 8004556:	d109      	bne.n	800456c <__libc_init_array+0x24>
 8004558:	4e0b      	ldr	r6, [pc, #44]	; (8004588 <__libc_init_array+0x40>)
 800455a:	4c0c      	ldr	r4, [pc, #48]	; (800458c <__libc_init_array+0x44>)
 800455c:	f000 f820 	bl	80045a0 <_init>
 8004560:	1ba4      	subs	r4, r4, r6
 8004562:	10a4      	asrs	r4, r4, #2
 8004564:	2500      	movs	r5, #0
 8004566:	42a5      	cmp	r5, r4
 8004568:	d105      	bne.n	8004576 <__libc_init_array+0x2e>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004570:	4798      	blx	r3
 8004572:	3501      	adds	r5, #1
 8004574:	e7ee      	b.n	8004554 <__libc_init_array+0xc>
 8004576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800457a:	4798      	blx	r3
 800457c:	3501      	adds	r5, #1
 800457e:	e7f2      	b.n	8004566 <__libc_init_array+0x1e>
 8004580:	08004620 	.word	0x08004620
 8004584:	08004620 	.word	0x08004620
 8004588:	08004620 	.word	0x08004620
 800458c:	08004624 	.word	0x08004624

08004590 <memset>:
 8004590:	4402      	add	r2, r0
 8004592:	4603      	mov	r3, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	d100      	bne.n	800459a <memset+0xa>
 8004598:	4770      	bx	lr
 800459a:	f803 1b01 	strb.w	r1, [r3], #1
 800459e:	e7f9      	b.n	8004594 <memset+0x4>

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
